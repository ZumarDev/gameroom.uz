{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\n# Set secret key with fallback\nsecret_key = os.environ.get(\"SESSION_SECRET\")\nif not secret_key:\n    import secrets\n    secret_key = secrets.token_hex(32)\n    os.environ[\"SESSION_SECRET\"] = secret_key\napp.secret_key = secret_key\napp.config['WTF_CSRF_SECRET_KEY'] = secret_key\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Initialize extensions\ndb.init_app(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import AdminUser\n    return AdminUser.query.get(int(user_id))\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models  # noqa: F401\n    db.create_all()\n\n# Import translation helper\nfrom translations import get_translation, get_current_language\n\n@app.template_filter('translate')\ndef translate_filter(key, lang=None):\n    \"\"\"Template filter for translations\"\"\"\n    from flask_login import current_user\n    if not lang:\n        lang = get_current_language(current_user if hasattr(current_user, 'preferred_language') else None)\n    return get_translation(key, lang)\n\n@app.context_processor\ndef inject_translation_context():\n    \"\"\"Inject translation context into all templates\"\"\"\n    from flask_login import current_user\n    current_lang = get_current_language(current_user if hasattr(current_user, 'preferred_language') else None)\n    return {\n        'current_lang': current_lang,\n        't': lambda key: get_translation(key, current_lang)\n    }\n\n# Import and register views\nfrom views import *  # noqa: F401, F403\n","size_bytes":2247},"create_admin.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript to create an admin user for the Gaming Center application.\nRun this script to create the initial admin user.\n\"\"\"\n\nimport sys\nimport os\nfrom werkzeug.security import generate_password_hash\n\n# Add the current directory to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom app import app, db\nfrom models import AdminUser\n\ndef create_admin():\n    with app.app_context():\n        # Check if admin already exists\n        existing_admin = AdminUser.query.first()\n        if existing_admin:\n            print(f\"Admin user already exists: {existing_admin.username}\")\n            return\n\n        # Create admin user\n        username = input(\"Enter admin username: \").strip()\n        if not username:\n            print(\"Username cannot be empty!\")\n            return\n\n        email = input(\"Enter admin email: \").strip()\n        if not email:\n            print(\"Email cannot be empty!\")\n            return\n\n        password = input(\"Enter admin password: \").strip()\n        if not password:\n            print(\"Password cannot be empty!\")\n            return\n\n        # Create the admin user\n        admin = AdminUser()\n        admin.username = username\n        admin.email = email\n        admin.password_hash = generate_password_hash(password)\n\n        try:\n            db.session.add(admin)\n            db.session.commit()\n            print(f\"Admin user '{username}' created successfully!\")\n            print(\"You can now login to the Gaming Center admin panel.\")\n        except Exception as e:\n            print(f\"Error creating admin user: {e}\")\n            db.session.rollback()\n\nif __name__ == \"__main__\":\n    print(\"Gaming Center - Admin User Creation\")\n    print(\"=\" * 40)\n    create_admin()\n","size_bytes":1752},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SelectField, IntegerField, FloatField, TextAreaField, HiddenField, SubmitField, FileField, DateField\nfrom wtforms.validators import DataRequired, Email, Length, NumberRange, Optional, EqualTo\n\nclass LoginForm(FlaskForm):\n    username = StringField('Foydalanuvchi nomi', validators=[DataRequired(), Length(min=4, max=20)])\n    password = PasswordField('Parol', validators=[DataRequired()])\n\nclass RoomCategoryForm(FlaskForm):\n    name = StringField('Kategoriya nomi', validators=[DataRequired(), Length(min=1, max=100)])\n    description = TextAreaField('Tavsif')\n    price_per_30min = FloatField('30 daqiqa uchun narx (som)', validators=[DataRequired(), NumberRange(min=0)], default=15000)\n\nclass RoomForm(FlaskForm):\n    name = StringField('Xona nomi', validators=[DataRequired(), Length(min=1, max=100)])\n    description = TextAreaField('Tavsif')\n    category_id = SelectField('Kategoriya', coerce=int, validators=[DataRequired()])\n    custom_price_per_30min = FloatField('Maxsus narx (30 daqiqa)', validators=[NumberRange(min=0)])\n\nclass RegisterForm(FlaskForm):\n    username = StringField('Foydalanuvchi nomi', validators=[DataRequired(), Length(min=4, max=20)])\n    gaming_center_name = StringField(\"O'yinxona nomi\", validators=[DataRequired(), Length(min=2, max=100)])\n    password = PasswordField('Parol', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Parolni tasdiqlash', validators=[DataRequired(), EqualTo('password', message='Parollar mos emas')])\n    secret_key = PasswordField('Maxfiy kalit', validators=[DataRequired()])\n\nclass ProductCategoryForm(FlaskForm):\n    name = StringField('Kategoriya nomi', validators=[DataRequired(), Length(min=1, max=100)])\n    description = TextAreaField('Tavsif')\n\nclass ProductForm(FlaskForm):\n    name = StringField('Mahsulot nomi', validators=[DataRequired(), Length(min=1, max=100)])\n    category_id = SelectField('Kategoriya', coerce=int, validators=[DataRequired()])\n    price = FloatField('Narx', validators=[DataRequired(), NumberRange(min=0)])\n    unit = StringField('O\\'lchov birligi', validators=[Length(max=20)], default='dona')\n    stock_quantity = IntegerField('Zaxira miqdori', validators=[DataRequired(), NumberRange(min=0)], default=0)\n    min_stock_alert = IntegerField('Minimal zaxira ogohlantiruvi', validators=[DataRequired(), NumberRange(min=0)], default=5)\n\nclass StockUpdateForm(FlaskForm):\n    quantity = IntegerField('Miqdor', validators=[DataRequired(), NumberRange(min=1)])\n    action = SelectField('Amal', choices=[\n        ('add', 'Qo\\'shish'),\n        ('remove', 'Chiqarish')\n    ], validators=[DataRequired()])\n    note = TextAreaField('Izoh')\n\nclass InventoryForm(FlaskForm):\n    product_id = SelectField('Mahsulot', coerce=int, validators=[DataRequired()])\n    quantity = IntegerField('Miqdor', validators=[DataRequired(), NumberRange(min=1)])\n    action = SelectField('Amal', choices=[\n        ('add', 'Qo\\'shish'),\n        ('set', 'Belgilash')\n    ], validators=[DataRequired()])\n    note = TextAreaField('Izoh')\n\nclass SessionForm(FlaskForm):\n    room_id = SelectField('Xona', coerce=int, validators=[DataRequired()])\n    session_type = SelectField('Seans turi', choices=[\n        ('fixed', 'Belgilangan vaqt'),\n        ('vip', 'VIP')\n    ], validators=[DataRequired()])\n    input_type = SelectField('Qanday kiritasiz?', choices=[\n        ('time', 'Vaqt davomiyligi'),\n        ('amount', 'Summa (avtomatik vaqt hisoblanadi)')\n    ], validators=[DataRequired()], default='time')\n    duration_hours = IntegerField('Soat', validators=[Optional(), NumberRange(min=0, max=24)], default=0)\n    duration_minutes = IntegerField('Daqiqa', validators=[Optional(), NumberRange(min=0, max=59)], default=30)\n    amount_input = FloatField('Summa', validators=[Optional(), NumberRange(min=0)])\n\nclass AddProductToSessionForm(FlaskForm):\n    product_id = SelectField('Mahsulot', coerce=int, validators=[DataRequired()])\n    quantity = IntegerField('Miqdori', validators=[DataRequired(), NumberRange(min=1)], default=1)\n    session_id = HiddenField()\n\nclass ChangePasswordForm(FlaskForm):\n    current_password = PasswordField('Joriy parol', validators=[DataRequired()])\n    new_password = PasswordField('Yangi parol', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Yangi parolni tasdiqlash', validators=[DataRequired(), EqualTo('new_password', message='Parollar mos emas')])\n\nclass ResetPasswordForm(FlaskForm):\n    username = StringField('Foydalanuvchi nomi', validators=[DataRequired()])\n    secret_key = PasswordField('Admin maxfiy kaliti', validators=[DataRequired()])\n\nclass ProfileForm(FlaskForm):\n    username = StringField('Foydalanuvchi nomi', validators=[DataRequired(), Length(min=4, max=20)])\n    gaming_center_name = StringField(\"O'yinxona nomi\", validators=[DataRequired(), Length(min=2, max=100)])\n\nclass QuickAddProductForm(FlaskForm):\n    product_id = SelectField('Mahsulot', coerce=int, validators=[DataRequired()])\n    quantity = IntegerField('Miqdori', validators=[DataRequired(), NumberRange(min=1)], default=1)\n\nclass ExcelImportForm(FlaskForm):\n    file = FileField('Excel fayl', validators=[DataRequired()])\n    \nclass ReportForm(FlaskForm):\n    report_type = SelectField('Hisobot turi', choices=[\n        ('daily', 'Kunlik'),\n        ('weekly', 'Xaftalik'), \n        ('monthly', 'Oylik')\n    ], validators=[DataRequired()])\n    start_date = DateField('Boshlanish sanasi', validators=[DataRequired()])\n    end_date = DateField('Tugash sanasi', validators=[DataRequired()])\n","size_bytes":5614},"main.py":{"content":"from app import app  # noqa: F401\n","size_bytes":34},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\nimport math\nfrom sqlalchemy import func\n\nclass AdminUser(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    gaming_center_name = db.Column(db.String(100), nullable=False, default=\"O'yinxona\")\n    is_admin_active = db.Column(db.Boolean, default=True)\n    preferred_language = db.Column(db.String(5), default='uz')  # Language preference\n    is_temp_password = db.Column(db.Boolean, default=False)  # Temporary password flag\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass RoomCategory(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    admin_user_id = db.Column(db.Integer, db.ForeignKey('admin_user.id'), nullable=False)  # Multi-tenant\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    price_per_30min = db.Column(db.Float, nullable=False, default=15000)  # Base price for 30 minutes\n    vip_price_per_minute = db.Column(db.Float, default=500)  # VIP price per minute\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship with rooms\n    rooms = db.relationship('Room', backref='category', lazy=True)\n\nclass Room(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    admin_user_id = db.Column(db.Integer, db.ForeignKey('admin_user.id'), nullable=False)  # Multi-tenant\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    category_id = db.Column(db.Integer, db.ForeignKey('room_category.id'), nullable=False)\n    custom_price_per_30min = db.Column(db.Float)  # Optional custom pricing, overrides category default\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship with sessions\n    sessions = db.relationship('Session', backref='room', lazy=True)\n    \n    def get_price_per_30min(self):\n        \"\"\"Get the price per 30 minutes for this room\"\"\"\n        if self.custom_price_per_30min:\n            return self.custom_price_per_30min\n        else:\n            category = RoomCategory.query.get(self.category_id)\n            return category.price_per_30min if category else 15000\n\nclass ProductCategory(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    admin_user_id = db.Column(db.Integer, db.ForeignKey('admin_user.id'), nullable=False)  # Multi-tenant\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship with products\n    products = db.relationship('Product', backref='product_category', lazy=True)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    admin_user_id = db.Column(db.Integer, db.ForeignKey('admin_user.id'), nullable=False)  # Multi-tenant\n    name = db.Column(db.String(100), nullable=False)\n    category_id = db.Column(db.Integer, db.ForeignKey('product_category.id'), nullable=False)\n    price = db.Column(db.Float, nullable=False)\n    unit = db.Column(db.String(20), default='dona')  # Unit of measurement (pieces, liters, etc.)\n    stock_quantity = db.Column(db.Integer, default=0)  # Current stock amount\n    min_stock_alert = db.Column(db.Integer, default=5)  # Minimum stock alert level\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def get_stock_status(self):\n        \"\"\"Get stock status: 'in_stock', 'low_stock', 'out_of_stock'\"\"\"\n        if self.stock_quantity <= 0:\n            return 'out_of_stock'\n        elif self.stock_quantity <= self.min_stock_alert:\n            return 'low_stock'\n        else:\n            return 'in_stock'\n    \n    def get_stock_status_text(self):\n        \"\"\"Get stock status in Uzbek\"\"\"\n        status = self.get_stock_status()\n        if status == 'out_of_stock':\n            return 'Tugagan'\n        elif status == 'low_stock':\n            return 'Kam qolgan'\n        else:\n            return 'Mavjud'\n    \n    def get_stock_color(self):\n        \"\"\"Get bootstrap color class for stock status\"\"\"\n        status = self.get_stock_status()\n        if status == 'out_of_stock':\n            return 'danger'\n        elif status == 'low_stock':\n            return 'warning'\n        else:\n            return 'success'\n\nclass Session(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    room_id = db.Column(db.Integer, db.ForeignKey('room.id'), nullable=False)\n    session_type = db.Column(db.String(20), nullable=False)  # 'fixed' or 'vip'\n    duration_minutes = db.Column(db.Float)  # For fixed sessions (can be fractional)\n    duration_seconds = db.Column(db.Integer, default=0)  # Exact seconds for precise timing\n    start_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    end_time = db.Column(db.DateTime)\n    is_active = db.Column(db.Boolean, default=True)\n    session_price = db.Column(db.Float, default=0.0)  # Base session price\n    prepaid_amount = db.Column(db.Float, default=0.0)  # Amount user actually paid (for prepaid sessions)\n    products_total = db.Column(db.Float, default=0.0)  # Total from products\n    total_price = db.Column(db.Float, default=0.0)  # session_price + products_total\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship with cart items\n    cart_items = db.relationship('CartItem', backref='session', lazy=True, cascade='all, delete-orphan')\n    \n    def calculate_duration_minutes(self):\n        \"\"\"Calculate actual duration for completed sessions\"\"\"\n        if self.end_time and self.start_time:\n            delta = self.end_time - self.start_time\n            return int(delta.total_seconds() / 60)\n        return 0\n    \n    def get_formatted_duration(self):\n        \"\"\"Get formatted duration with seconds for completed sessions\"\"\"\n        if self.end_time and self.start_time:\n            delta = self.end_time - self.start_time\n            total_seconds = int(delta.total_seconds())\n            hours = total_seconds // 3600\n            minutes = (total_seconds % 3600) // 60\n            seconds = total_seconds % 60\n            \n            if hours > 0:\n                return f\"{hours}s {minutes}daq {seconds}s\"\n            elif minutes > 0:\n                return f\"{minutes}daq {seconds}s\"\n            else:\n                return f\"{seconds}s\"\n        return \"0s\"\n    \n    def get_display_duration(self):\n        \"\"\"Get duration to display - actual duration if completed, planned if ongoing\"\"\"\n        if self.end_time and self.start_time:\n            # Completed session - show actual duration\n            actual_duration = self.calculate_duration_minutes()\n            return f\"{actual_duration} daqiqa (haqiqiy)\"\n        elif self.session_type == 'fixed' and self.duration_minutes:\n            # Ongoing fixed session - show planned duration\n            return f\"{self.duration_minutes} daqiqa\"\n        else:\n            # VIP or unknown\n            return \"VIP\"\n    \n    def calculate_vip_price(self, rate_per_minute=500):\n        \"\"\"Calculate VIP session price based on duration\"\"\"\n        if self.session_type == 'vip' and self.end_time:\n            duration = self.calculate_duration_minutes()\n            return duration * rate_per_minute\n        return self.session_price\n    \n    def update_total_price(self):\n        \"\"\"Calculate and update total price based on room pricing and actual duration\"\"\"\n        # Load room relationship if not already loaded\n        if not hasattr(self, '_room') or self._room is None:\n            self._room = Room.query.get(self.room_id)\n        \n        # Get room pricing - use custom price if set, otherwise category price\n        if self._room and self._room.custom_price_per_30min:\n            price_per_30min = self._room.custom_price_per_30min\n        elif self._room and self._room.category:\n            price_per_30min = self._room.category.price_per_30min\n        else:\n            price_per_30min = 15000  # Default fallback\n        \n        # Calculate session price based on actual time played\n        if self.session_type == 'fixed':\n            # CRITICAL FIX: If user prepaid (prepaid_amount > 0), use that amount regardless of time\n            # This prevents overcharging when users pay fixed amounts like 500 som\n            if self.prepaid_amount and self.prepaid_amount > 0:\n                # User prepaid - always use prepaid amount\n                self.session_price = self.prepaid_amount\n            else:\n                # Calculate based on time (for time-based pricing)\n                if self.end_time and not self.is_active:\n                    # Session completed - calculate actual time played\n                    if self.start_time:\n                        actual_duration = self.end_time - self.start_time\n                        actual_minutes = actual_duration.total_seconds() / 60\n                    else:\n                        actual_minutes = self.duration_minutes or 0\n                else:\n                    # Session ongoing - calculate current duration for real-time pricing\n                    if self.start_time:\n                        actual_duration = datetime.utcnow() - self.start_time\n                        actual_minutes = actual_duration.total_seconds() / 60\n                    else:\n                        actual_minutes = self.duration_minutes or 0\n                \n                # Calculate per minute for accurate pricing\n                price_per_minute = price_per_30min / 30\n                self.session_price = actual_minutes * price_per_minute\n            \n        else:  # VIP session\n            # Calculate based on actual duration per minute\n            if self.end_time and self.start_time:\n                actual_duration = self.end_time - self.start_time\n                minutes = actual_duration.total_seconds() / 60\n            elif self.start_time:\n                actual_duration = datetime.utcnow() - self.start_time\n                minutes = actual_duration.total_seconds() / 60\n            else:\n                minutes = 0\n            \n            # Calculate price per minute for more accurate billing\n            price_per_minute = price_per_30min / 30\n            self.session_price = minutes * price_per_minute\n        \n        # Calculate products total\n        cart_items = CartItem.query.filter_by(session_id=self.id).all()\n        products_total = sum(item.product.price * item.quantity for item in cart_items if item.product)\n        self.products_total = products_total\n        \n        # Update total\n        self.total_price = self.session_price + self.products_total\n\nclass CartItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    session_id = db.Column(db.Integer, db.ForeignKey('session.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False, default=1)\n    added_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    product = db.relationship('Product')\n\n# Fixed session pricing configuration\nFIXED_SESSION_PRICES = {\n    30: 15000,  # 30 minutes = 15,000 som\n    60: 25000,  # 60 minutes = 25,000 som\n    90: 35000,  # 90 minutes = 35,000 som\n    120: 45000  # 120 minutes = 45,000 som\n}\n","size_bytes":11592},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-wtf>=1.2.2\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"wtforms>=3.2.1\",\n    \"sqlalchemy>=2.0.41\",\n    \"flask-login>=0.6.3\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":401},"replit.md":{"content":"# Gaming Center Management System\n\n## Overview\n\nA Flask-based web application for managing a gaming center with room-based gaming sessions, product sales, and revenue analytics. The system supports two types of gaming sessions (fixed-time and VIP) with real-time timer functionality and comprehensive admin management features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nInterface preferences: Uzbek language throughout, centered section headers, enhanced filtering and search capabilities.\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: Flask with SQLAlchemy ORM\n- **Database**: SQLite (configured via environment variable, defaults to local file)\n- **Authentication**: Flask-Login for admin session management\n- **Forms**: WTForms for form validation and rendering\n- **Password Security**: Werkzeug for password hashing\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 dark theme\n- **CSS Framework**: Bootstrap 5 with enhanced custom styling (custom.css + enhanced.css)\n- **JavaScript**: Vanilla JS for real-time timers, dashboard functionality, and filtering/search\n- **Icons**: Bootstrap Icons for consistent UI elements\n- **Enhanced Features**: Search and filter functionality, centered page headers, date selection for reports\n\n### Authentication System\n- Single admin user authentication using Flask-Login\n- Password hashing with Werkzeug security utilities\n- Session-based authentication with protected routes\n- Admin user creation script for initial setup\n\n## Key Components\n\n### Models (SQLAlchemy)\n1. **AdminUser**: Single admin account with login credentials\n2. **Room**: Gaming rooms that can host sessions\n3. **Product**: Sellable items (drinks, snacks, food) with categories and pricing\n4. **Session**: Gaming sessions with timer functionality and pricing\n5. **CartItem**: Products purchased during sessions (referenced but not fully implemented)\n\n### Forms (WTForms)\n- LoginForm: Admin authentication\n- RoomForm: Room creation and management  \n- ProductForm: Product management with categories\n- SessionForm: Session creation with room and type selection\n- AddProductToSessionForm: Adding products to active sessions\n\n### Views (Flask Routes)\n- Authentication routes (login/logout)\n- Dashboard with statistics and active session overview\n- Room management (CRUD operations) with category filtering\n- Product management (CRUD operations) with category filtering and search\n- Session management (start/stop/monitor) with accurate duration tracking\n- Analytics and revenue reporting with daily/monthly date selection\n\n## Data Flow\n\n### Session Management Flow\n1. Admin selects room and session type (fixed or VIP)\n2. For fixed sessions: predefined duration and pricing (30min=15k, 60min=25k, etc.)\n3. For VIP sessions: open-ended timing with manual stop\n4. Real-time JavaScript timers track session duration\n5. Products can be added during active sessions\n6. Session completion calculates total cost (session + products)\n\n### Revenue Tracking\n- Daily, weekly, and monthly revenue aggregation\n- Session-based revenue (room usage fees)\n- Product-based revenue (food/drinks sold)\n- Combined analytics dashboard with statistics cards\n\n### Real-time Features\n- JavaScript-powered session timers that update every second\n- AJAX endpoints for timer data (referenced in timer.js)\n- Auto-refreshing dashboard every 30 seconds\n- Visual indicators for session status (active/warning/completed)\n\n## External Dependencies\n\n### Python Packages\n- Flask: Web framework\n- Flask-SQLAlchemy: Database ORM\n- Flask-Login: Authentication management\n- Flask-WTF: Form handling and CSRF protection\n- WTForms: Form validation\n- Werkzeug: Password hashing and security utilities\n\n### Frontend Libraries\n- Bootstrap 5: UI framework with dark theme\n- Bootstrap Icons: Icon library\n- Custom CSS for gaming-specific styling\n- Vanilla JavaScript for timer functionality\n\n### Database\n- PostgreSQL for production deployment on Replit\n- Connection pooling and ping configuration for production readiness\n- Environment variable DATABASE_URL configured automatically\n\n## Deployment Strategy\n\n### Development Setup\n- Flask development server on port 5000\n- Debug mode enabled for development\n- SQLite database with automatic table creation\n- Admin creation script for initial setup\n\n### Production Considerations\n- Environment-based configuration (DATABASE_URL, SESSION_SECRET)\n- ProxyFix middleware for reverse proxy deployments\n- Database connection pooling configured\n- Logging system configured for debugging\n\n### File Structure\n- `app.py`: Main application factory and configuration\n- `models.py`: Database models and relationships with duration calculation methods\n- `views.py`: Route handlers and business logic with enhanced analytics\n- `forms.py`: Form definitions and validation\n- `templates/`: Jinja2 HTML templates with enhanced UI and centered headers\n- `static/css/`: Custom styling (custom.css, enhanced.css)\n- `static/js/`: JavaScript functionality (timer.js, dashboard.js, filters.js)\n- `create_admin.py`: Initial admin user creation utility\n\n## Recent Changes (July 2025)\n\n### Inventory Management System Implementation (July 30, 2025)\n- **Stock Management**: Added comprehensive inventory tracking to Product model\n  - Added stock_quantity and min_stock_alert fields to products\n  - Implemented stock status methods (in_stock, low_stock, out_of_stock)\n  - Stock deduction when products are sold during sessions\n- **Inventory Management Interface**: Created dedicated inventory management page\n  - Stock overview cards showing total, available, low stock, and out of stock products\n  - Inventory update form for adding/setting stock levels\n  - Real-time stock status display with color-coded indicators\n- **Session Product Management**: Enhanced product addition during sessions\n  - Stock validation before adding products to sessions\n  - Automatic stock deduction when products are sold\n  - Stock alerts when inventory is low or depleted\n- **Category System**: Simplified product categories for user creation\n  - Removed predefined categories, allowing custom category creation\n  - Category management through modal interface\n  - Improved Uzbek language consistency in category display\n\n## Recent Changes (July 2025)\n\n### Migration and Multi-User System\n- **Replit Migration**: Successfully migrated from Replit Agent to standard Replit environment\n- **PostgreSQL Integration**: Configured PostgreSQL database for production deployment\n- **Multi-User Support**: Added registration system for multiple gaming centers with unique admin accounts\n- **Gaming Center Names**: Each admin can have their own gaming center name displayed in navbar\n- **Database Updates**: Added gaming_center_name and is_admin_active fields to AdminUser model\n- **Multi-Tenant Architecture**: Complete implementation with admin_user_id fields across all models\n- **Registration Security**: Secret key protection for new admin account creation\n\n### UI/UX Improvements and Interface Unification (July 29, 2025)\n- **Centered Headers**: Dashboard, Sessions, and Products pages now have centered, styled headers with icons\n- **Dark Theme Consistency**: Fixed white backgrounds in CSS to maintain dark gaming theme\n- **Enhanced Styling**: Improved gradient colors and removed light theme elements\n- **Unified Room Management**: Combined rooms and categories into single interface at /rooms-management\n- **Navigation Simplification**: Replaced dropdown menu with single link for rooms and categories\n\n### Filter System and Duration Display Fixes\n- **Product Category Translation**: Fixed category display to show Uzbek translations (drinks->Ichimliklar)\n- **Category Management**: Added ability to add new product categories through modal interface\n- **JavaScript Filter Improvements**: Enhanced category matching with proper null checking and mapping\n- **Duration Display**: Implemented precise duration display with seconds for completed sessions\n- **Form Consistency**: Updated ProductForm to include desserts category and aligned with filter options\n\n### Migration Completion and Multi-Tenant Architecture (July 29, 2025 - Evening)\n- **Migration Completion**: Successfully migrated from Replit Agent to standard Replit environment\n- **Database Migration**: PostgreSQL database fully configured and connected  \n- **Complete Multi-Tenant Architecture**: Full gaming center separation implemented\n  - Added admin_user_id to all models (Room, RoomCategory, Product)\n  - Each gaming center operates completely independently with own data\n  - Dashboard, products, rooms, sessions, and analytics filtered by current user\n  - All CRUD operations (create, read, update, delete) properly secured per user\n  - Session management, product sales, and reporting completely isolated per admin\n- **Products Interface Enhancement**: Updated products page with improved design\n  - Implemented tab-based interface matching rooms management layout\n  - Simplified category system using Uzbek names only (removed English confusion)\n  - Card-based layout with proper category display and product counts\n  - Fixed category filtering system to use consistent Uzbek naming\n- **Security Fixes**: Resolved all multi-tenant security issues\n  - Fixed product deletion to check admin ownership\n  - Secured all session operations to only user's rooms\n  - Protected analytics to show only current user's data\n  - Added validation to prevent cross-tenant data access\n\n## Previous Changes (January 2025)\n\n### UI/UX Enhancements\n- **Centered Page Headers**: All section headers now display centered with attractive icons and descriptions\n- **Enhanced Styling**: Added enhanced.css with modern gradients, animations, and improved visual appeal\n- **Responsive Design**: Better mobile-friendly layout and button sizing\n\n### Filtering and Search Features\n- **Product Search**: Real-time search by product name with category filtering (ichimliklar, gazaklar, ovqatlar, etc.)\n- **Room Category Search**: Search room categories by name and description\n- **Room Filtering**: Filter rooms by category and search by name/description\n- **Enhanced JavaScript**: Added filters.js for all search and filtering functionality\n\n### Analytics Improvements\n- **Date Selection**: Daily and monthly report selection with specific date/month picking\n- **Dynamic Reports**: Analytics page now supports query parameters for date filtering\n- **Enhanced Display**: Improved analytics layout with main report card and comparison cards\n- **Uzbek Localization**: Month names and interface elements properly localized\n\n### Session Management Fixes\n- **Accurate Duration**: Fixed session duration calculation to show actual time played, not planned time\n- **Error Handling**: Improved null-checking for start_time fields\n- **Real-time Pricing**: Both fixed and VIP sessions now use per-minute accurate pricing calculations\n\nThe application follows a traditional Flask MVC pattern with enhanced user experience, making it both maintainable and visually appealing for gaming center management.","size_bytes":11083},"translations.py":{"content":"# Multi-language translations for the gaming center application\n\nTRANSLATIONS = {\n    'en': {\n        # Navigation\n        'dashboard': 'Dashboard',\n        'sessions': 'Sessions',\n        'rooms_categories': 'Playrooms',\n        'products': 'Products',\n        'inventory': 'Inventory',\n        'reports': 'Reports',\n        'logout': 'Logout',\n        \n        # Dashboard\n        'control_panel': 'Control Panel',\n        'gaming_center_stats': 'Gaming Center Statistics',\n        'total_rooms': 'Total Rooms',\n        'active_sessions': 'Active Sessions',\n        'total_products': 'Total Products',\n        'todays_revenue': 'Today\\'s Revenue',\n        'som': 'sum',\n        'active_gaming_sessions': 'Active Gaming Sessions',\n        'no_active_sessions': 'No active sessions',\n        'start_first_session': 'Start first session',\n        \n        # Products & Inventory\n        'product_management': 'Product Management',\n        'inventory_management': 'Inventory Management',\n        'add_product': 'Add Product',\n        'product_name': 'Product Name',\n        'category': 'Category',\n        'price': 'Price',\n        'stock_quantity': 'Stock Quantity',\n        'min_stock_alert': 'Minimum Stock Alert',\n        'unit': 'Unit',\n        'available': 'Available',\n        'low_stock': 'Low Stock',\n        'out_of_stock': 'Out of Stock',\n        'stock_status': 'Stock Status',\n        \n        # Stock statuses\n        'in_stock': 'In Stock',\n        'stock_low': 'Low Stock',\n        'stock_out': 'Out of Stock',\n        \n        # Actions\n        'add': 'Add',\n        'edit': 'Edit',\n        'delete': 'Delete',\n        'update': 'Update',\n        'cancel': 'Cancel',\n        'save': 'Save',\n        'confirm': 'Confirm',\n        \n        # Forms\n        'quantity': 'Quantity',\n        'action': 'Action',\n        'note': 'Note',\n        'optional': 'optional',\n        \n        # Messages\n        'success': 'Success',\n        'error': 'Error',\n        'warning': 'Warning',\n        'info': 'Information',\n        \n        # Additional\n        'management': 'Management',\n        'no_categories': 'No Categories',\n        'create_first_category': 'Create your first category',\n        'track_manage_inventory': 'Track and manage product inventory',\n        'current_stock': 'Current Stock',\n        'update_stock': 'Update Stock',\n        'inventory_update': 'Inventory Update',\n        'set_stock': 'Set Stock',\n        'add_stock': 'Add Stock',\n        'remove_stock': 'Remove Stock',\n        'inventory_list': 'Inventory List',\n        'min_limit': 'Min. Limit',\n    },\n    \n    'ru': {\n        # Navigation\n        'dashboard': 'Панель управления',\n        'sessions': 'Сеансы',\n        'rooms_categories': 'Игровые залы',\n        'products': 'Продукты',\n        'inventory': 'Склад',\n        'reports': 'Отчеты',\n        'logout': 'Выход',\n        \n        # Dashboard\n        'control_panel': 'Панель Управления',\n        'gaming_center_stats': 'Статистика игрового центра',\n        'total_rooms': 'Всего комнат',\n        'active_sessions': 'Активные сеансы',\n        'total_products': 'Всего продуктов',\n        'todays_revenue': 'Доход за сегодня',\n        'som': 'сум',\n        'active_gaming_sessions': 'Активные игровые сеансы',\n        'no_active_sessions': 'Нет активных сеансов',\n        'start_first_session': 'Начать первый сеанс',\n        \n        # Products & Inventory\n        'product_management': 'Управление продуктами',\n        'inventory_management': 'Управление складом',\n        'add_product': 'Добавить продукт',\n        'product_name': 'Название продукта',\n        'category': 'Категория',\n        'price': 'Цена',\n        'stock_quantity': 'Количество на складе',\n        'min_stock_alert': 'Минимальный запас',\n        'unit': 'Единица',\n        'available': 'Доступно',\n        'low_stock': 'Мало на складе',\n        'out_of_stock': 'Нет в наличии',\n        'stock_status': 'Статус склада',\n        \n        # Stock statuses\n        'in_stock': 'В наличии',\n        'stock_low': 'Мало',\n        'stock_out': 'Нет в наличии',\n        \n        # Actions\n        'add': 'Добавить',\n        'edit': 'Изменить',\n        'delete': 'Удалить',\n        'update': 'Обновить',\n        'cancel': 'Отмена',\n        'save': 'Сохранить',\n        'confirm': 'Подтвердить',\n        \n        # Forms\n        'quantity': 'Количество',\n        'action': 'Действие',\n        'note': 'Примечание',\n        'optional': 'необязательно',\n        \n        # Messages\n        'success': 'Успех',\n        'error': 'Ошибка',\n        'warning': 'Предупреждение',\n        'info': 'Информация',\n        \n        # Additional\n        'management': 'Управление',\n        'no_categories': 'Нет категорий',\n        'create_first_category': 'Создайте первую категорию',\n        'track_manage_inventory': 'Отслеживание и управление запасами продуктов',\n        'current_stock': 'Текущий запас',\n        'update_stock': 'Обновить запас',\n        'inventory_update': 'Обновление склада',\n        'set_stock': 'Установить запас',\n        'add_stock': 'Добавить запас',\n        'remove_stock': 'Убрать запас',\n        'inventory_list': 'Список склада',\n        'min_limit': 'Мин. лимит',\n    },\n    \n    'uz': {\n        # Navigation\n        'dashboard': 'Boshqaruv Paneli',\n        'sessions': 'Seanslar',\n        'rooms_categories': 'O\\'yinxonalar',\n        'products': 'Mahsulotlar',\n        'inventory': 'Zaxira',\n        'reports': 'Hisobotlar',\n        'logout': 'Chiqish',\n        \n        # Dashboard\n        'control_panel': 'Boshqaruv Paneli',\n        'gaming_center_stats': 'O\\'yinxona statistikasi',\n        'total_rooms': 'Jami xonalar',\n        'active_sessions': 'Faol seanslar',\n        'total_products': 'Jami mahsulotlar',\n        'todays_revenue': 'Bugungi daromad',\n        'som': 'som',\n        'active_gaming_sessions': 'Faol o\\'yin seanslari',\n        'no_active_sessions': 'Faol seanslar yo\\'q',\n        'start_first_session': 'Birinchi seansni boshlash',\n        \n        # Products & Inventory\n        'product_management': 'Mahsulotlarni boshqarish',\n        'inventory_management': 'Zaxira boshqaruvi',\n        'add_product': 'Mahsulot qo\\'shish',\n        'product_name': 'Mahsulot nomi',\n        'category': 'Kategoriya',\n        'price': 'Narx',\n        'stock_quantity': 'Zaxira miqdori',\n        'min_stock_alert': 'Minimal zaxira ogohlantiruvi',\n        'unit': 'O\\'lchov birligi',\n        'available': 'Mavjud',\n        'low_stock': 'Kam qolgan',\n        'out_of_stock': 'Tugagan',\n        'stock_status': 'Zaxira holati',\n        \n        # Stock statuses\n        'in_stock': 'Mavjud',\n        'stock_low': 'Kam qolgan',\n        'stock_out': 'Tugagan',\n        \n        # Actions\n        'add': 'Qo\\'shish',\n        'edit': 'Tahrirlash',\n        'delete': 'O\\'chirish',\n        'update': 'Yangilash',\n        'cancel': 'Bekor qilish',\n        'save': 'Saqlash',\n        'confirm': 'Tasdiqlash',\n        \n        # Forms\n        'quantity': 'Miqdor',\n        'action': 'Amal',\n        'note': 'Izoh',\n        'optional': 'ixtiyoriy',\n        \n        # Messages\n        'success': 'Muvaffaqiyat',\n        'error': 'Xatolik',\n        'warning': 'Ogohlantirish',\n        'info': 'Ma\\'lumot',\n        \n        # Additional\n        'management': 'Boshqaruvi',\n        'no_categories': 'Kategoriyalar yo\\'q',\n        'create_first_category': 'Birinchi kategoriyani yarating',\n        'track_manage_inventory': 'Mahsulotlar zaxirasini kuzatish va boshqarish',\n        'current_stock': 'Joriy zaxira',\n        'update_stock': 'Zaxirani yangilash',\n        'inventory_update': 'Zaxira yangilanishi',\n        'set_stock': 'Zaxirani belgilash',\n        'add_stock': 'Zaxira qo\\'shish',\n        'remove_stock': 'Zaxirani kamaytirish',\n        'inventory_list': 'Zaxira ro\\'yxati',\n        'min_limit': 'Min. chegara',\n    }\n}\n\ndef get_translation(key, lang='uz'):\n    \"\"\"Get translation for a key in the specified language\"\"\"\n    return TRANSLATIONS.get(lang, {}).get(key, key)\n\ndef get_current_language(user=None):\n    \"\"\"Get current language based on user preference or default\"\"\"\n    if user and hasattr(user, 'preferred_language'):\n        return user.preferred_language\n    return 'uz'  # Default to Uzbek","size_bytes":8952},"views.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify, send_file, make_response\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import check_password_hash\nfrom werkzeug.utils import secure_filename\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import func, extract\nimport math\nimport os\nimport pandas as pd\nfrom io import BytesIO\nimport tempfile\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter, A4\nfrom reportlab.lib.units import inch\nfrom reportlab.lib import colors\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom app import app, db\nfrom models import AdminUser, Room, RoomCategory, ProductCategory, Product, Session, CartItem, FIXED_SESSION_PRICES\nfrom forms import LoginForm, RoomForm, RoomCategoryForm, ProductCategoryForm, ProductForm, SessionForm, AddProductToSessionForm, RegisterForm, StockUpdateForm, InventoryForm, ChangePasswordForm, ResetPasswordForm, ProfileForm, QuickAddProductForm, ExcelImportForm, ReportForm\nfrom werkzeug.security import generate_password_hash\nfrom translations import get_translation, get_current_language\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return redirect(url_for('login'))\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = AdminUser.query.filter_by(username=form.username.data).first()\n        password_data = form.password.data\n        if user and user.password_hash and password_data and check_password_hash(user.password_hash, password_data):\n            login_user(user)\n            if hasattr(user, 'is_temp_password') and user.is_temp_password:\n                flash('Vaqtinchalik parol bilan kirdingiz. Iltimos, parolni o\\'zgartiring!', 'warning')\n                return redirect(url_for('change_password'))\n            flash('Muvaffaqiyatli kirildi!', 'success')\n            return redirect(url_for('dashboard'))\n        flash('Foydalanuvchi nomi yoki parol noto\\'g\\'ri', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegisterForm()\n    if form.validate_on_submit():\n        # Check secret key\n        import os\n        secret_key = os.environ.get('SECRET_ADMIN_KEY', 'admin123')\n        if form.secret_key.data != secret_key:\n            flash('Maxfiy kalit noto\\'g\\'ri!', 'danger')\n            return render_template('register.html', form=form)\n        \n        # Check if username already exists\n        existing_user = AdminUser.query.filter_by(username=form.username.data).first()\n        if existing_user:\n            flash('Bu foydalanuvchi nomi band!', 'danger')\n            return render_template('register.html', form=form)\n        \n        # Create new admin user\n        user = AdminUser()\n        user.username = form.username.data\n        user.gaming_center_name = form.gaming_center_name.data\n        if form.password.data:\n            user.password_hash = generate_password_hash(form.password.data)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        flash(f'{form.gaming_center_name.data} uchun admin akkaunt yaratildi!', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Tizimdan chiqdingiz.', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/profile', methods=['GET', 'POST'])\n@login_required\ndef profile():\n    form = ProfileForm()\n    if form.validate_on_submit():\n        # Check if username is taken by another user\n        existing_user = AdminUser.query.filter(\n            AdminUser.username == form.username.data,\n            AdminUser.id != current_user.id\n        ).first()\n        if existing_user:\n            flash('Bu foydalanuvchi nomi band!', 'danger')\n            return render_template('profile.html', form=form)\n        \n        current_user.username = form.username.data\n        current_user.gaming_center_name = form.gaming_center_name.data\n        db.session.commit()\n        flash('Profil muvaffaqiyatli yangilandi!', 'success')\n        return redirect(url_for('profile'))\n    \n    # Pre-fill form with current data\n    form.username.data = current_user.username\n    form.gaming_center_name.data = current_user.gaming_center_name\n    return render_template('profile.html', form=form)\n\n@app.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    form = ChangePasswordForm()\n    if form.validate_on_submit():\n        # Check current password if not temp password\n        if not (hasattr(current_user, 'is_temp_password') and current_user.is_temp_password):\n            if not check_password_hash(current_user.password_hash, form.current_password.data):\n                flash('Joriy parol noto\\'g\\'ri!', 'danger')\n                return render_template('change_password.html', form=form)\n        \n        # Update password\n        current_user.password_hash = generate_password_hash(form.new_password.data)\n        if hasattr(current_user, 'is_temp_password'):\n            current_user.is_temp_password = False\n        db.session.commit()\n        flash('Parol muvaffaqiyatli o\\'zgartirildi!', 'success')\n        return redirect(url_for('dashboard'))\n    \n    return render_template('change_password.html', form=form)\n\n@app.route('/reset-password', methods=['GET', 'POST'])\ndef reset_password():\n    form = ResetPasswordForm()\n    if form.validate_on_submit():\n        # Check admin secret key\n        import os\n        import secrets\n        import string\n        \n        secret_key = os.environ.get('SECRET_ADMIN_KEY', 'admin123')\n        if form.secret_key.data != secret_key:\n            flash('Admin maxfiy kaliti noto\\'g\\'ri!', 'danger')\n            return render_template('reset_password.html', form=form)\n        \n        # Find user\n        user = AdminUser.query.filter_by(username=form.username.data).first()\n        if not user:\n            flash('Foydalanuvchi topilmadi!', 'danger')\n            return render_template('reset_password.html', form=form)\n        \n        # Generate temporary password\n        temp_password = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))\n        user.password_hash = generate_password_hash(temp_password)\n        if hasattr(user, 'is_temp_password'):\n            user.is_temp_password = True\n        db.session.commit()\n        \n        flash(f'Vaqtinchalik parol yaratildi: {temp_password}', 'success')\n        flash('Foydalanuvchi kirgach parolni o\\'zgartirishi kerak!', 'info')\n        return redirect(url_for('login'))\n    \n    return render_template('reset_password.html', form=form)\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    # Multi-tenant: Get active sessions for current user's rooms only\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    active_sessions = Session.query.filter(\n        Session.room_id.in_(user_room_ids),\n        Session.is_active == True\n    ).all()\n    \n    # Get today's statistics for current user only\n    today = datetime.utcnow().date()\n    today_sessions = Session.query.filter(\n        Session.room_id.in_(user_room_ids),\n        func.date(Session.created_at) == today,\n        Session.is_active == False\n    ).all()\n    \n    today_revenue = sum(session.total_price for session in today_sessions)\n    total_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).count()\n    total_products = Product.query.filter_by(admin_user_id=current_user.id, is_active=True).count()\n    \n    # Get data for modals\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    available_products = Product.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    \n    return render_template('dashboard.html',\n                         active_sessions=active_sessions,\n                         today_revenue=today_revenue,\n                         total_rooms=total_rooms,\n                         total_products=total_products,\n                         session_count=len(today_sessions),\n                         user_rooms=user_rooms,\n                         available_products=available_products)\n\n@app.route('/rooms-management')\n@login_required\ndef rooms_management():\n    # Multi-tenant: Only show categories and rooms for current user\n    categories = RoomCategory.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    rooms = Room.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    \n    category_form = RoomCategoryForm()\n    room_form = RoomForm()\n    room_form.category_id.choices = [(c.id, c.name) for c in categories]\n    \n    return render_template('rooms_management.html', \n                         categories=categories, \n                         rooms=rooms,\n                         category_form=category_form,\n                         room_form=room_form)\n\n@app.route('/room-categories')\n@login_required\ndef room_categories():\n    return redirect(url_for('rooms_management'))\n\n@app.route('/room-categories/add', methods=['POST'])\n@login_required\ndef add_room_category():\n    form = RoomCategoryForm()\n    if form.validate_on_submit():\n        category = RoomCategory()\n        category.admin_user_id = current_user.id  # Multi-tenant\n        category.name = form.name.data\n        category.description = form.description.data\n        category.price_per_30min = form.price_per_30min.data\n        db.session.add(category)\n        db.session.commit()\n        flash(f'Kategoriya \"{category.name}\" muvaffaqiyatli yaratildi!', 'success')\n    return redirect(url_for('rooms_management'))\n\n@app.route('/room-categories/<int:category_id>/edit', methods=['POST'])\n@login_required\ndef edit_room_category(category_id):\n    category = RoomCategory.query.filter_by(id=category_id, admin_user_id=current_user.id).first_or_404()\n    form = RoomCategoryForm()\n    if form.validate_on_submit():\n        category.name = form.name.data\n        category.description = form.description.data\n        category.price_per_30min = form.price_per_30min.data\n        db.session.commit()\n        flash(f'Kategoriya \"{category.name}\" yangilandi!', 'success')\n    return redirect(url_for('rooms_management'))\n\n@app.route('/room-categories/<int:category_id>/delete')\n@login_required\ndef delete_room_category(category_id):\n    category = RoomCategory.query.filter_by(id=category_id, admin_user_id=current_user.id).first_or_404()\n    category.is_active = False\n    db.session.commit()\n    flash(f'Kategoriya \"{category.name}\" o\\'chirildi!', 'success')\n    return redirect(url_for('rooms_management'))\n\n@app.route('/rooms')\n@login_required\ndef rooms():\n    rooms_list = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    form = RoomForm()\n    form.category_id.choices = [(c.id, c.name) for c in RoomCategory.query.filter_by(admin_user_id=current_user.id, is_active=True).all()]\n    return redirect(url_for('rooms_management'))\n\n@app.route('/rooms/add', methods=['POST'])\n@login_required\ndef add_room():\n    form = RoomForm()\n    form.category_id.choices = [(c.id, c.name) for c in RoomCategory.query.filter_by(admin_user_id=current_user.id, is_active=True).all()]\n    if form.validate_on_submit():\n        room = Room()\n        room.admin_user_id = current_user.id  # Multi-tenant\n        room.name = form.name.data\n        room.description = form.description.data\n        room.category_id = form.category_id.data\n        room.custom_price_per_30min = form.custom_price_per_30min.data\n        db.session.add(room)\n        db.session.commit()\n        flash(f'Xona \"{room.name}\" muvaffaqiyatli yaratildi!', 'success')\n    else:\n        flash('Xona qo\\'shishda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    return redirect(url_for('rooms_management'))\n\n\n\n@app.route('/rooms/delete/<int:room_id>')\n@login_required\ndef delete_room(room_id):\n    room = Room.query.filter_by(id=room_id, admin_user_id=current_user.id).first_or_404()\n    room.is_active = False\n    db.session.commit()\n    flash(f'Xona \"{room.name}\" o\\'chirildi!', 'success')\n    return redirect(url_for('rooms_management'))\n\n@app.route('/rooms/edit/<int:room_id>', methods=['POST'])\n@login_required\ndef edit_room(room_id):\n    room = Room.query.filter_by(id=room_id, admin_user_id=current_user.id).first_or_404()\n    \n    room.name = request.form.get('name')\n    room.description = request.form.get('description')\n    room.category_id = request.form.get('category_id')\n    \n    # Handle custom price - empty string should be converted to None\n    custom_price = request.form.get('custom_price_per_30min')\n    if custom_price and custom_price.strip():\n        room.custom_price_per_30min = float(custom_price)\n    else:\n        room.custom_price_per_30min = None\n    \n    db.session.commit()\n    flash(f'Xona \"{room.name}\" muvaffaqiyatli yangilandi!', 'success')\n    return redirect(url_for('rooms_management'))\n\n@app.route('/products')\n@login_required\ndef products():\n    # Multi-tenant: Only show products and categories for current user's gaming center\n    products_list = Product.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    categories_list = ProductCategory.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    \n    # Setup forms\n    form = ProductForm()\n    form.category_id.choices = [(c.id, c.name) for c in categories_list]\n    category_form = ProductCategoryForm()\n    \n    return render_template('products.html', \n                         products=products_list, \n                         categories=categories_list,\n                         form=form,\n                         category_form=category_form)\n\n@app.route('/products/add', methods=['POST'])\n@login_required\ndef add_product():\n    categories_list = ProductCategory.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    form = ProductForm()\n    form.category_id.choices = [(c.id, c.name) for c in categories_list]\n    \n    if form.validate_on_submit():\n        product = Product()\n        product.admin_user_id = current_user.id  # Multi-tenant\n        product.name = form.name.data\n        product.category_id = form.category_id.data\n        product.price = form.price.data\n        product.unit = form.unit.data\n        product.stock_quantity = form.stock_quantity.data\n        product.min_stock_alert = form.min_stock_alert.data\n        db.session.add(product)\n        db.session.commit()\n        \n        flash(f'Mahsulot \"{product.name}\" muvaffaqiyatli qo\\'shildi!', 'success')\n    else:\n        flash('Mahsulot qo\\'shishda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    return redirect(url_for('products'))\n\n@app.route('/products/delete/<int:product_id>')\n@login_required\ndef delete_product(product_id):\n    product = Product.query.filter_by(id=product_id, admin_user_id=current_user.id).first_or_404()\n    product.is_active = False\n    db.session.commit()\n    flash(f'Mahsulot \"{product.name}\" o\\'chirildi!', 'success')\n    return redirect(url_for('products'))\n\n@app.route('/products/add-category', methods=['POST'])\n@login_required\ndef add_product_category():\n    form = ProductCategoryForm()\n    if form.validate_on_submit():\n        category = ProductCategory()\n        category.admin_user_id = current_user.id  # Multi-tenant\n        category.name = form.name.data\n        category.description = form.description.data\n        db.session.add(category)\n        db.session.commit()\n        \n        flash(f'Kategoriya \"{category.name}\" muvaffaqiyatli qo\\'shildi!', 'success')\n    else:\n        flash('Kategoriya qo\\'shishda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    return redirect(url_for('products'))\n\n@app.route('/products/edit-category/<int:category_id>', methods=['POST'])\n@login_required\ndef edit_product_category(category_id):\n    category = ProductCategory.query.filter_by(id=category_id, admin_user_id=current_user.id).first_or_404()\n    form = ProductCategoryForm()\n    if form.validate_on_submit():\n        category.name = form.name.data\n        category.description = form.description.data\n        db.session.commit()\n        flash(f'Kategoriya \"{category.name}\" yangilandi!', 'success')\n    else:\n        flash('Kategoriya yangilashda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    return redirect(url_for('products'))\n\n@app.route('/products/delete-category/<int:category_id>')\n@login_required\ndef delete_product_category(category_id):\n    category = ProductCategory.query.filter_by(id=category_id, admin_user_id=current_user.id).first_or_404()\n    \n    # Check if category has active products\n    active_products = Product.query.filter_by(category_id=category_id, is_active=True).count()\n    if active_products > 0:\n        flash(f'Kategoriya o\\'chirilmadi: \"{category.name}\" kategoriyasida {active_products} ta faol mahsulot bor!', 'danger')\n    else:\n        category.is_active = False\n        db.session.commit()\n        flash(f'Kategoriya \"{category.name}\" o\\'chirildi!', 'success')\n    return redirect(url_for('products'))\n\n# Inventory management routes\n@app.route('/inventory')\n@login_required\ndef inventory():\n    \"\"\"Display inventory management page with stock levels\"\"\"\n    products_list = Product.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    \n    # Create inventory form\n    inventory_form = InventoryForm()\n    inventory_form.product_id.choices = [(p.id, f\"{p.name} ({p.stock_quantity} {p.unit})\") \n                                       for p in products_list]\n    \n    return render_template('inventory.html', \n                         products=products_list, \n                         form=inventory_form)\n\n@app.route('/inventory/update', methods=['POST'])\n@login_required\ndef update_inventory():\n    \"\"\"Update product stock levels\"\"\"\n    form = InventoryForm()\n    products_list = Product.query.filter_by(\n        admin_user_id=current_user.id,\n        is_active=True\n    ).all()\n    form.product_id.choices = [(p.id, f\"{p.name} ({p.stock_quantity} {p.unit})\") \n                             for p in products_list]\n    \n    if form.validate_on_submit():\n        product = Product.query.filter_by(\n            id=form.product_id.data, \n            admin_user_id=current_user.id\n        ).first_or_404()\n        \n        old_quantity = product.stock_quantity\n        quantity = form.quantity.data\n        action = form.action.data\n        \n        if action == 'add':\n            product.stock_quantity += quantity\n            flash(f'{product.name} mahsulotiga {quantity} {product.unit} qo\\'shildi. Yangi zaxira: {product.stock_quantity}', 'success')\n        elif action == 'set':\n            product.stock_quantity = quantity\n            flash(f'{product.name} mahsuloti zaxirasi {quantity} {product.unit} ga o\\'rnatildi.', 'success')\n        \n        db.session.commit()\n    else:\n        flash('Zaxira yangilashda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    \n    return redirect(url_for('inventory'))\n\n@app.route('/sessions')\n@login_required\ndef sessions():\n    # Multi-tenant: Get sessions for current user's rooms only\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    active_sessions = Session.query.filter(Session.room_id.in_(user_room_ids), Session.is_active == True).all()\n    completed_sessions = Session.query.filter(Session.room_id.in_(user_room_ids), Session.is_active == False).order_by(Session.created_at.desc()).limit(20).all()\n    \n    # Setup form for new session\n    form = SessionForm()\n    form.room_id.choices = [(r.id, r.name) for r in user_rooms]\n    \n    return render_template('sessions.html', \n                         active_sessions=active_sessions,\n                         completed_sessions=completed_sessions,\n                         form=form)\n\n@app.route('/sessions/start', methods=['POST'])\n@login_required\ndef start_session():\n    form = SessionForm()\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    form.room_id.choices = [(r.id, r.name) for r in user_rooms]\n    \n    if form.validate_on_submit():\n        # Get user room IDs for multi-tenant check\n        user_room_ids = [room.id for room in user_rooms]\n        \n        # Check if room is already in use - Multi-tenant: Only check current user's sessions\n        existing_session = Session.query.filter(\n            Session.room_id == form.room_id.data,\n            Session.room_id.in_(user_room_ids),\n            Session.is_active == True\n        ).first()\n        if existing_session:\n            flash('Bu xona allaqachon ishlatilmoqda!', 'danger')\n            return redirect(url_for('sessions'))\n        \n        room = Room.query.filter_by(id=form.room_id.data, admin_user_id=current_user.id).first()\n        \n        # Check which input type user selected and validate accordingly\n        if form.session_type.data == 'fixed':\n            if form.input_type.data == 'amount':\n                # User provided amount - calculate time based on room/category pricing\n                if not form.amount_input.data or form.amount_input.data <= 0:\n                    flash('Summa kiritish kerak va 0 dan katta bo\\'lishi kerak!', 'danger')\n                    return redirect(url_for('sessions'))\n                    \n                target_amount = form.amount_input.data\n                if room and room.custom_price_per_30min:\n                    price_per_30min = room.custom_price_per_30min\n                elif room and room.category:\n                    price_per_30min = room.category.price_per_30min\n                else:\n                    price_per_30min = 15000  # Default fallback\n                \n                # Calculate exact time based on amount entered\n                # For example: if room costs 1000 per 30min and user enters 100, \n                # they get (100/1000)*30 = 3 minutes of play time\n                calculated_seconds = (target_amount / price_per_30min) * 30 * 60  # Convert to seconds\n                total_seconds = max(int(calculated_seconds), 60)  # Minimum 1 minute (60 seconds)\n                total_minutes = total_seconds / 60  # Keep as float for precise timing\n                \n                # Show user how much time they got for their money\n                hours = int(total_minutes // 60)\n                minutes = int(total_minutes % 60)\n                seconds = int((total_minutes % 1) * 60)\n                \n                if hours > 0:\n                    time_display = f\"{hours} soat {minutes} daqiqa\"\n                elif minutes > 0:\n                    time_display = f\"{minutes} daqiqa {seconds} soniya\" if seconds > 0 else f\"{minutes} daqiqa\"\n                else:\n                    time_display = f\"{seconds} soniya\"\n                    \n                flash(f'💰 {target_amount:,.0f} som uchun {time_display} vaqt berildi!', 'info')\n                \n                session = Session()\n                session.room_id = form.room_id.data\n                session.session_type = form.session_type.data\n                session.duration_minutes = total_minutes\n                session.duration_seconds = total_seconds  # Store exact seconds for precise timing\n                \n                # User pays exactly what they entered - save as prepaid amount\n                session.prepaid_amount = target_amount\n                session.session_price = target_amount\n                session.total_price = target_amount\n            else:\n                # User provided time - calculate amount based on room/category pricing\n                hours = form.duration_hours.data or 0\n                minutes = form.duration_minutes.data or 0\n                total_minutes = (hours * 60) + minutes\n                if total_minutes == 0:\n                    total_minutes = 30  # Default to 30 minutes if no time specified\n                    \n                session = Session()\n                session.room_id = form.room_id.data\n                session.session_type = form.session_type.data\n                session.duration_minutes = total_minutes\n                \n                # Calculate based on room/category pricing and duration\n                session.update_total_price()\n        else:\n            # VIP session - price will be calculated when stopped\n            session = Session()\n            session.room_id = form.room_id.data\n            session.session_type = form.session_type.data\n            session.duration_minutes = None\n            session.session_price = 0\n            session.total_price = 0\n        \n        try:\n            db.session.add(session)\n            db.session.commit()\n            flash('Seans muvaffaqiyatli boshlandi!', 'success')\n        except Exception as e:\n            db.session.rollback()\n            flash(f'Seans saqlashda xatolik: {str(e)}', 'danger')\n    else:\n        # Print form errors for debugging\n        for field, errors in form.errors.items():\n            for error in errors:\n                flash(f'{field}: {error}', 'danger')\n        flash('Seans boshlashda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    \n    return redirect(url_for('sessions'))\n\n# Inventory management removed per user request\n\n@app.route('/sessions/stop/<int:session_id>')\n@login_required\ndef stop_session(session_id):\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    session.end_time = datetime.utcnow()\n    session.is_active = False\n    \n    # Update pricing (prepaid amounts will be preserved automatically in the model)\n    session.update_total_price()\n    \n    db.session.commit()\n    actual_duration = (session.end_time - session.start_time).total_seconds() / 60\n    session_type_text = \"Belgilangan vaqt\" if session.session_type == 'fixed' else \"VIP\"\n    flash(f'🎮 O\\'yin yakunlandi! {session_type_text} seans - {actual_duration:.1f} daqiqa o\\'ynaldi. Jami: {session.total_price:,.0f} som', 'success')\n    return redirect(url_for('sessions'))\n\n@app.route('/sessions/<int:session_id>')\n@login_required\ndef session_detail(session_id):\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    \n    # Form for adding products - Multi-tenant: Only show current user's products\n    form = AddProductToSessionForm()\n    form.product_id.choices = [(p.id, f\"{p.name} - {p.price:,.0f} som\") \n                              for p in Product.query.filter_by(admin_user_id=current_user.id, is_active=True).all()]\n    form.session_id.data = session_id\n    \n    return render_template('session_detail.html', session=session, form=form)\n\n@app.route('/sessions/<int:session_id>/add_product', methods=['POST'])\n@login_required\ndef add_product_to_session(session_id):\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    form = AddProductToSessionForm()\n    form.product_id.choices = [(p.id, f\"{p.name} - {p.price:,.0f} som\") \n                              for p in Product.query.filter_by(admin_user_id=current_user.id, is_active=True).all()]\n    \n    if form.validate_on_submit():\n        product = Product.query.filter_by(id=form.product_id.data, admin_user_id=current_user.id).first()\n        quantity = form.quantity.data\n        \n        # Check stock availability\n        if not product:\n            flash('Mahsulot topilmadi!', 'danger')\n            return redirect(url_for('session_detail', session_id=session_id))\n        \n        if product.stock_quantity < quantity:\n            flash(f'{product.name} mahsulotidan yetarlicha zaxira yo\\'q! Mavjud: {product.stock_quantity} {product.unit}', 'danger')\n            return redirect(url_for('session_detail', session_id=session_id))\n        \n        # Check if product already in cart\n        existing_item = CartItem.query.filter_by(\n            session_id=session_id,\n            product_id=form.product_id.data\n        ).first()\n        \n        if existing_item:\n            existing_item.quantity += quantity\n        else:\n            cart_item = CartItem()\n            cart_item.session_id = session_id\n            cart_item.product_id = form.product_id.data\n            cart_item.quantity = quantity\n            db.session.add(cart_item)\n        \n        # Deduct stock\n        product.stock_quantity -= quantity\n        \n        session.update_total_price()\n        db.session.commit()\n        \n        stock_status = \"\"\n        if product.stock_quantity <= 0:\n            stock_status = \" (zaxira tugadi)\"\n        elif product.stock_quantity <= product.min_stock_alert:\n            stock_status = f\" (kam qoldi: {product.stock_quantity})\"\n        \n        flash(f'{quantity} ta {product.name} seansga qo\\'shildi!{stock_status}', 'success')\n    else:\n        flash('Mahsulot qo\\'shishda xatolik. Ma\\'lumotlarni tekshiring.', 'danger')\n    \n    return redirect(url_for('session_detail', session_id=session_id))\n\n@app.route('/api/session_time/<int:session_id>')\n@login_required\ndef api_session_time(session_id):\n    \"\"\"API endpoint for real-time session timing data\"\"\"\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    \n    if not session.is_active:\n        return jsonify({'error': 'Session not active'}), 400\n    \n    now = datetime.utcnow()\n    elapsed_seconds = int((now - session.start_time).total_seconds())\n    \n    if session.session_type == 'fixed':\n        # Fixed session - calculate remaining time\n        total_seconds = session.duration_minutes * 60 if session.duration_minutes else 1800  # Default 30 min\n        remaining_seconds = max(0, total_seconds - elapsed_seconds)\n        expired = remaining_seconds <= 0\n        \n        return jsonify({\n            'elapsed_seconds': elapsed_seconds,\n            'remaining_seconds': remaining_seconds,\n            'expired': expired,\n            'session_price': session.session_price or 0,\n            'total_price': session.total_price or 0,\n            'current_cost': session.session_price or 0\n        })\n    else:\n        # VIP session - calculate real-time pricing based on elapsed time\n        elapsed_minutes = elapsed_seconds / 60.0\n        \n        # Get VIP pricing from room category\n        room = session.room\n        room_category = room.category if room else None\n        vip_price_per_minute = getattr(room_category, 'vip_price_per_minute', 500) if room_category else 500  # Default 500 som/minute\n        \n        # Calculate current session price based on elapsed time\n        current_session_price = elapsed_minutes * vip_price_per_minute\n        \n        # Update session price in database for consistency\n        session.session_price = current_session_price\n        session.update_total_price()  # This will also include product costs\n        db.session.commit()\n        \n        return jsonify({\n            'elapsed_seconds': elapsed_seconds,\n            'remaining_seconds': None,\n            'expired': False,\n            'session_price': current_session_price,\n            'total_price': session.total_price or current_session_price,\n            'current_cost': current_session_price\n        })\n\n@app.route('/sessions/<int:session_id>/remove_product/<int:item_id>')\n@login_required\ndef remove_product_from_session(session_id, item_id):\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    cart_item = CartItem.query.get_or_404(item_id)\n    \n    db.session.delete(cart_item)\n    session.update_total_price()\n    db.session.commit()\n    flash('Mahsulot seansdan olib tashlandi!', 'success')\n    \n    return redirect(url_for('session_detail', session_id=session_id))\n\n@app.route('/analytics')\n@login_required\ndef analytics():\n    # Get report type and date from query parameters\n    report_type = request.args.get('type', 'monthly')\n    selected_date = request.args.get('date')\n    selected_month = request.args.get('month')\n    \n    today = datetime.utcnow().date()\n    current_date = today.strftime('%Y-%m-%d')\n    current_month = today.strftime('%Y-%m')\n    \n    if report_type == 'daily':\n        # Daily analytics for specific date\n        if selected_date:\n            try:\n                target_date = datetime.strptime(selected_date, '%Y-%m-%d').date()\n            except ValueError:\n                target_date = today\n        else:\n            target_date = today\n            \n        # Multi-tenant: Get sessions for current user's rooms only\n        user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n        user_room_ids = [room.id for room in user_rooms]\n        daily_sessions = Session.query.filter(\n            Session.room_id.in_(user_room_ids),\n            func.date(Session.created_at) == target_date,\n            Session.is_active == False\n        ).all()\n        daily_revenue = sum(session.total_price for session in daily_sessions)\n        \n        # For daily view, show the selected day as \"main\" data\n        main_revenue = daily_revenue\n        main_sessions = len(daily_sessions)\n        main_title = f\"Kunlik Hisobot - {target_date.strftime('%d.%m.%Y')}\"\n        \n        # Calculate revenue breakdown for the day\n        session_revenue = sum(session.session_price for session in daily_sessions)\n        products_revenue = sum(session.products_total for session in daily_sessions)\n        \n    else:\n        # Monthly analytics for specific month\n        if selected_month:\n            try:\n                year, month = map(int, selected_month.split('-'))\n            except (ValueError, AttributeError):\n                year, month = today.year, today.month\n        else:\n            year, month = today.year, today.month\n            \n        # Multi-tenant: Get sessions for current user's rooms only\n        user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n        user_room_ids = [room.id for room in user_rooms]\n        monthly_sessions = Session.query.filter(\n            Session.room_id.in_(user_room_ids),\n            extract('month', Session.created_at) == month,\n            extract('year', Session.created_at) == year,\n            Session.is_active == False\n        ).all()\n        monthly_revenue = sum(session.total_price for session in monthly_sessions)\n        \n        # For monthly view, show the selected month as \"main\" data\n        main_revenue = monthly_revenue\n        main_sessions = len(monthly_sessions)\n        month_names = ['', 'Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'Iyun',\n                      'Iyul', 'Avgust', 'Sentabr', 'Oktabr', 'Noyabr', 'Dekabr']\n        main_title = f\"Oylik Hisobot - {month_names[month]} {year}\"\n        \n        # Calculate revenue breakdown for the month\n        session_revenue = sum(session.session_price for session in monthly_sessions)\n        products_revenue = sum(session.products_total for session in monthly_sessions)\n    \n    # Always calculate today's data for comparison - Multi-tenant\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    today_sessions = Session.query.filter(\n        Session.room_id.in_(user_room_ids),\n        func.date(Session.created_at) == today,\n        Session.is_active == False\n    ).all()\n    today_revenue = sum(session.total_price for session in today_sessions)\n    \n    # Weekly analytics - Multi-tenant\n    week_start = today - timedelta(days=today.weekday())\n    weekly_sessions = Session.query.filter(\n        Session.room_id.in_(user_room_ids),\n        Session.created_at >= week_start,\n        Session.is_active == False\n    ).all()\n    weekly_revenue = sum(session.total_price for session in weekly_sessions)\n    \n    return render_template('analytics.html',\n                         report_type=report_type,\n                         current_date=current_date,\n                         current_month=current_month,\n                         main_revenue=main_revenue,\n                         main_sessions=main_sessions,\n                         main_title=main_title,\n                         daily_revenue=today_revenue,\n                         daily_sessions=len(today_sessions),\n                         weekly_revenue=weekly_revenue,\n                         weekly_sessions=len(weekly_sessions),\n                         monthly_revenue=main_revenue if report_type == 'monthly' else 0,\n                         monthly_sessions=main_sessions if report_type == 'monthly' else 0,\n                         session_revenue=session_revenue,\n                         products_revenue=products_revenue)\n\n@app.route('/api/session_time/<int:session_id>')\n@login_required\ndef get_session_time(session_id):\n    # Multi-tenant: Check session belongs to current user's room\n    user_rooms = Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    user_room_ids = [room.id for room in user_rooms]\n    session = Session.query.filter(Session.id == session_id, Session.room_id.in_(user_room_ids)).first_or_404()\n    now = datetime.utcnow()\n    \n    if session.session_type == 'fixed':\n        # Calculate remaining time\n        end_time = session.start_time + timedelta(minutes=session.duration_minutes)\n        remaining = end_time - now\n        elapsed = now - session.start_time\n        elapsed_minutes = elapsed.total_seconds() / 60\n        \n        # Calculate current cost based on room pricing\n        room = session.room\n        if room and room.custom_price_per_30min:\n            price_per_30min = room.custom_price_per_30min\n        elif room and room.category:\n            price_per_30min = room.category.price_per_30min\n        else:\n            price_per_30min = 15000  # Default fallback\n        \n        # Calculate per-minute cost and current total\n        price_per_minute = price_per_30min / 30\n        current_cost = elapsed_minutes * price_per_minute\n        \n        if remaining.total_seconds() <= 0:\n            # Session should be auto-stopped\n            if session.is_active:\n                session.end_time = end_time\n                session.is_active = False\n                # Recalculate price for the actual time played (full planned duration)\n                session.update_total_price()\n                db.session.commit()\n            \n            return jsonify({\n                'expired': True,\n                'remaining_seconds': 0,\n                'elapsed_seconds': session.duration_minutes * 60,\n                'current_cost': current_cost\n            })\n        \n        return jsonify({\n            'expired': False,\n            'remaining_seconds': int(remaining.total_seconds()),\n            'elapsed_seconds': int(elapsed.total_seconds()),\n            'current_cost': current_cost\n        })\n    \n    else:  # VIP session\n        elapsed = now - session.start_time\n        elapsed_minutes = elapsed.total_seconds() / 60\n        \n        # Calculate current cost based on room pricing\n        room = session.room\n        if room and room.custom_price_per_30min:\n            price_per_30min = room.custom_price_per_30min\n        elif room and room.category:\n            price_per_30min = room.category.price_per_30min\n        else:\n            price_per_30min = 15000  # Default fallback\n        \n        # Calculate per-minute cost and current total\n        price_per_minute = price_per_30min / 30\n        current_cost = elapsed_minutes * price_per_minute\n        \n        return jsonify({\n            'expired': False,\n            'remaining_seconds': 0,\n            'elapsed_seconds': int(elapsed.total_seconds()),\n            'current_cost': current_cost\n        })\n\n# Excel Import/Export Routes\n@app.route('/products/export-excel')\n@login_required\ndef export_products_excel():\n    \"\"\"Excel formatida mahsulotlarni export qilish\"\"\"\n    products = Product.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    \n    # Create DataFrame\n    data = []\n    for product in products:\n        data.append({\n            'Nomi': product.name,\n            'Kategoriya': product.category,\n            'Narxi (som)': product.price,\n            'Zaxira miqdori': product.stock_quantity or 0,\n            'Minimum zaxira': product.min_stock_alert or 0,\n            'Holati': product.stock_status(),\n            'Yaratilgan sana': product.created_at.strftime('%Y-%m-%d') if product.created_at else ''\n        })\n    \n    df = pd.DataFrame(data)\n    \n    # Create Excel file in memory\n    output = BytesIO()\n    with pd.ExcelWriter(output, engine='openpyxl') as writer:\n        df.to_excel(writer, sheet_name='Mahsulotlar', index=False)\n    \n    output.seek(0)\n    \n    return send_file(\n        output,\n        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        as_attachment=True,\n        download_name=f'mahsulotlar_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.xlsx'\n    )\n\n@app.route('/products/import-excel', methods=['POST'])\n@login_required\ndef import_products_excel():\n    \"\"\"Excel faylidan mahsulotlarni import qilish\"\"\"\n    if 'file' not in request.files:\n        flash('Fayl tanlanmagan!', 'danger')\n        return redirect(url_for('products'))\n    \n    file = request.files['file']\n    if file.filename == '':\n        flash('Fayl tanlanmagan!', 'danger')\n        return redirect(url_for('products'))\n    \n    if not file.filename.endswith('.xlsx'):\n        flash('Faqat .xlsx formatidagi fayllar qabul qilinadi!', 'danger')\n        return redirect(url_for('products'))\n    \n    try:\n        # Read Excel file\n        df = pd.read_excel(file, sheet_name=0)\n        \n        # Validate required columns\n        required_columns = ['Nomi', 'Kategoriya', 'Narxi (som)']\n        for col in required_columns:\n            if col not in df.columns:\n                flash(f'Kerakli ustun topilmadi: {col}', 'danger')\n                return redirect(url_for('products'))\n        \n        imported_count = 0\n        for _, row in df.iterrows():\n            # Check if product already exists\n            existing_product = Product.query.filter_by(\n                admin_user_id=current_user.id,\n                name=row['Nomi'],\n                is_active=True\n            ).first()\n            \n            if not existing_product:\n                product = Product()\n                product.admin_user_id = current_user.id\n                product.name = row['Nomi']\n                product.category = row['Kategoriya']\n                product.price = float(row['Narxi (som)'])\n                product.stock_quantity = int(row.get('Zaxira miqdori', 0))\n                product.min_stock_alert = int(row.get('Minimum zaxira', 0))\n                \n                db.session.add(product)\n                imported_count += 1\n        \n        db.session.commit()\n        flash(f'{imported_count} ta mahsulot muvaffaqiyatli import qilindi!', 'success')\n        \n    except Exception as e:\n        db.session.rollback()\n        flash(f'Import paytida xatolik: {str(e)}', 'danger')\n    \n    return redirect(url_for('products'))\n\n# PDF Report Routes\n@app.route('/reports/pdf/<report_type>')\n@login_required\ndef generate_pdf_report(report_type):\n    \"\"\"PDF hisobot yaratish\"\"\"\n    # Get date range from query params\n    start_date_str = request.args.get('start_date')\n    end_date_str = request.args.get('end_date')\n    \n    if not start_date_str or not end_date_str:\n        flash('Sana oralig\\'ini tanlang!', 'danger')\n        return redirect(url_for('analytics'))\n    \n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()\n    except ValueError:\n        flash('Sana formati noto\\'g\\'ri!', 'danger')\n        return redirect(url_for('analytics'))\n    \n    # Get user's rooms\n    user_room_ids = [room.id for room in Room.query.filter_by(admin_user_id=current_user.id, is_active=True).all()]\n    \n    # Get sessions data\n    sessions = Session.query.filter(\n        Session.room_id.in_(user_room_ids),\n        func.date(Session.created_at) >= start_date,\n        func.date(Session.created_at) <= end_date,\n        Session.is_active == False\n    ).all()\n    \n    # Create PDF\n    buffer = BytesIO()\n    doc = SimpleDocTemplate(buffer, pagesize=A4)\n    styles = getSampleStyleSheet()\n    elements = []\n    \n    # Title\n    title_style = ParagraphStyle(\n        'CustomTitle',\n        parent=styles['Heading1'],\n        fontSize=18,\n        textColor=colors.darkblue,\n        alignment=1,  # Center\n        spaceAfter=30\n    )\n    \n    report_titles = {\n        'daily': 'Kunlik Hisobot',\n        'weekly': 'Xaftalik Hisobot', \n        'monthly': 'Oylik Hisobot'\n    }\n    \n    title = f\"{current_user.gaming_center_name}\\n{report_titles.get(report_type, 'Hisobot')}\"\n    elements.append(Paragraph(title, title_style))\n    elements.append(Spacer(1, 12))\n    \n    # Date range\n    date_text = f\"Sana oralig'i: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\"\n    elements.append(Paragraph(date_text, styles['Normal']))\n    elements.append(Spacer(1, 20))\n    \n    # Statistics\n    total_revenue = sum(session.total_price for session in sessions)\n    total_sessions = len(sessions)\n    \n    stats_data = [\n        ['Jami seanslar', str(total_sessions)],\n        ['Jami daromad', f\"{total_revenue:,.0f} som\"],\n        ['O\\'rtacha seans summasi', f\"{total_revenue/total_sessions if total_sessions > 0 else 0:,.0f} som\"]\n    ]\n    \n    stats_table = Table(stats_data, colWidths=[3*inch, 2*inch])\n    stats_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, 0), 14),\n        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    \n    elements.append(stats_table)\n    elements.append(Spacer(1, 30))\n    \n    # Sessions table\n    if sessions:\n        elements.append(Paragraph(\"Seanslar ro'yxati:\", styles['Heading2']))\n        elements.append(Spacer(1, 12))\n        \n        session_data = [['Xona', 'Sana', 'Vaqt', 'Davomiyligi', 'Summa (som)']]\n        \n        for session in sessions[:50]:  # Limit to 50 sessions for PDF\n            duration_display = session.get_duration_display() if hasattr(session, 'get_duration_display') else 'N/A'\n            session_data.append([\n                session.room.name,\n                session.created_at.strftime('%d.%m.%Y'),\n                session.start_time.strftime('%H:%M') if session.start_time else 'N/A',\n                duration_display,\n                f\"{session.total_price:,.0f}\"\n            ])\n        \n        session_table = Table(session_data, colWidths=[1*inch, 1*inch, 1*inch, 1*inch, 1*inch])\n        session_table.setStyle(TableStyle([\n            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 0), 10),\n            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('FONTSIZE', (0, 1), (-1, -1), 8)\n        ]))\n        \n        elements.append(session_table)\n    \n    # Build PDF\n    doc.build(elements)\n    buffer.seek(0)\n    \n    filename = f\"{report_type}_hisobot_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.pdf\"\n    \n    return send_file(\n        buffer,\n        mimetype='application/pdf',\n        as_attachment=True,\n        download_name=filename\n    )\n\n@app.route('/inventory-stats')\n@login_required  \ndef inventory_stats_api():\n    \"\"\"Zaxira statistikasi uchun API endpoint\"\"\"\n    products = Product.query.filter_by(admin_user_id=current_user.id, is_active=True).all()\n    \n    total_products = len(products)\n    in_stock = len([p for p in products if p.stock_quantity and p.stock_quantity > 0])\n    low_stock = len([p for p in products if p.stock_quantity and p.min_stock_alert and p.stock_quantity <= p.min_stock_alert])\n    out_of_stock = len([p for p in products if not p.stock_quantity or p.stock_quantity <= 0])\n    \n    return jsonify({\n        'total': total_products,\n        'in_stock': in_stock,\n        'low_stock': low_stock,\n        'out_of_stock': out_of_stock\n    })\n","size_bytes":50252},"static/css/custom.css":{"content":"/* Custom styles for Gaming Center - Modern UI */\n\n/* CSS Variables for Gaming Theme */\n:root {\n    --gaming-primary: #00ff88;\n    --gaming-secondary: #ff6b35;\n    --gaming-accent: #00d4ff;\n    --gaming-dark: #0a0a0a;\n    --gaming-surface: #1a1a1a;\n    --gaming-surface-light: #2a2a2a;\n    --gaming-border: #333;\n    --gaming-text: #ffffff;\n    --gaming-text-muted: #b3b3b3;\n    --gaming-glow: rgba(0, 255, 136, 0.3);\n    --gaming-shadow: rgba(0, 0, 0, 0.5);\n}\n\n/* Modern Timer styling with glow effects */\n.timer {\n    font-family: 'Orbitron', 'Courier New', monospace;\n    font-weight: 700;\n    position: relative;\n}\n\n.timer .time-display {\n    font-size: 1.2em;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light));\n    border: 2px solid var(--gaming-border);\n    display: inline-block;\n    min-width: 120px;\n    text-align: center;\n    box-shadow: 0 4px 15px var(--gaming-shadow);\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.timer .time-display::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left 0.5s;\n}\n\n.timer .time-display:hover::before {\n    left: 100%;\n}\n\n/* Modern Session status indicators with glow */\n.session-active {\n    border-left: 4px solid var(--gaming-primary);\n    box-shadow: 0 0 10px var(--gaming-glow);\n}\n\n.session-warning {\n    border-left: 4px solid var(--gaming-secondary);\n    box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);\n}\n\n.session-danger {\n    border-left: 4px solid #ff4757;\n    box-shadow: 0 0 10px rgba(255, 71, 87, 0.3);\n}\n\n.session-completed {\n    border-left: 4px solid var(--gaming-text-muted);\n}\n\n/* Enhanced Card hover effects with modern styling */\n.card {\n    background: var(--gaming-surface);\n    border: 1px solid var(--gaming-border);\n    border-radius: 1rem;\n    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    position: relative;\n    overflow: hidden;\n}\n\n.card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 2px;\n    background: linear-gradient(90deg, var(--gaming-primary), var(--gaming-accent));\n    transform: scaleX(0);\n    transition: transform 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px var(--gaming-shadow), 0 0 20px var(--gaming-glow);\n    border-color: var(--gaming-primary);\n}\n\n.card:hover::before {\n    transform: scaleX(1);\n}\n\n/* Gaming Navbar Styles */\n.gaming-navbar {\n    background: linear-gradient(135deg, var(--gaming-dark), var(--gaming-surface));\n    border-bottom: 2px solid var(--gaming-border);\n    padding: 0.5rem 0; /* Reduced padding */\n    box-shadow: 0 2px 10px var(--gaming-shadow);\n}\n\n.gaming-brand {\n    font-family: 'Orbitron', sans-serif;\n    font-weight: 700;\n    color: var(--gaming-primary) !important;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem; /* Reduced gap */\n}\n\n.gaming-logo {\n    font-size: 1.5rem; /* Reduced size */\n    animation: pulse 2s infinite;\n}\n\n.brand-text {\n    font-size: 1.1rem; /* Reduced size */\n    text-shadow: 0 0 10px var(--gaming-glow);\n}\n\n.navbar-nav .nav-link {\n    color: var(--gaming-text) !important;\n    font-weight: 500;\n    padding: 0.5rem 0.75rem !important; /* Reduced padding */\n    border-radius: 0.5rem;\n    transition: all 0.3s ease;\n    font-size: 0.9rem; /* Reduced font size */\n}\n\n.navbar-nav .nav-link:hover {\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    color: var(--gaming-dark) !important;\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px var(--gaming-glow);\n}\n\n.dropdown-menu {\n    background: var(--gaming-surface);\n    border: 1px solid var(--gaming-border);\n    border-radius: 0.75rem;\n    box-shadow: 0 8px 25px var(--gaming-shadow);\n}\n\n.dropdown-item {\n    color: var(--gaming-text);\n    padding: 0.5rem 1rem; /* Reduced padding */\n    transition: all 0.3s ease;\n}\n\n.dropdown-item:hover {\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    color: var(--gaming-dark);\n}\n\n@keyframes pulse {\n    0% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.05);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n/* Modern Button Styles */\n.btn {\n    border-radius: 0.75rem;\n    font-weight: 600;\n    padding: 0.75rem 1.5rem;\n    border: none;\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    color: var(--gaming-dark);\n    box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);\n}\n\n.btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 255, 136, 0.4);\n    background: linear-gradient(135deg, #00ff88, #00e6ff);\n}\n\n.btn-danger {\n    background: linear-gradient(135deg, #ff4757, #ff3742);\n    color: white;\n    box-shadow: 0 4px 15px rgba(255, 71, 87, 0.3);\n}\n\n.btn-danger:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(255, 71, 87, 0.4);\n}\n\n.btn-secondary {\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light));\n    color: var(--gaming-text);\n    border: 1px solid var(--gaming-border);\n}\n\n.btn-secondary:hover {\n    transform: translateY(-2px);\n    border-color: var(--gaming-primary);\n    color: var(--gaming-primary);\n}\n\n/* Enhanced Button loading state */\n.btn-loading {\n    position: relative;\n    pointer-events: none;\n    opacity: 0.8;\n}\n\n.btn-loading::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 20px;\n    height: 20px;\n    margin: -10px 0 0 -10px;\n    border: 2px solid transparent;\n    border-top: 2px solid currentColor;\n    border-radius: 50%;\n    animation: gaming-spin 0.8s linear infinite;\n}\n\n@keyframes gaming-spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Modern Dashboard Cards */\n.dashboard-card {\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light));\n    border: 1px solid var(--gaming-border);\n    border-radius: 1.5rem;\n    padding: 2rem;\n    text-align: center;\n    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n}\n\n.dashboard-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.dashboard-card:hover {\n    transform: translateY(-10px) scale(1.03);\n    box-shadow: 0 20px 40px var(--gaming-shadow), 0 0 30px var(--gaming-glow);\n    border-color: var(--gaming-primary);\n}\n\n.dashboard-card:hover::before {\n    opacity: 0.1;\n}\n\n.dashboard-card .fs-1 {\n    font-size: 3rem !important;\n    margin-bottom: 1rem;\n    color: var(--gaming-primary);\n    text-shadow: 0 0 20px var(--gaming-glow);\n}\n\n.dashboard-card h3 {\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Enhanced Session timer alerts */\n.timer-warning {\n    animation: gaming-pulse 2s infinite;\n}\n\n.timer-danger {\n    animation: gaming-blink 1s infinite;\n}\n\n@keyframes gaming-pulse {\n    0% { \n        opacity: 1; \n        box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);\n    }\n    50% { \n        opacity: 0.7; \n        box-shadow: 0 0 20px rgba(255, 107, 53, 0.6);\n    }\n    100% { \n        opacity: 1; \n        box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);\n    }\n}\n\n@keyframes gaming-blink {\n    0%, 50% { \n        opacity: 1; \n        box-shadow: 0 0 15px rgba(255, 71, 87, 0.5);\n    }\n    51%, 100% { \n        opacity: 0.3; \n        box-shadow: 0 0 5px rgba(255, 71, 87, 0.2);\n    }\n}\n\n/* Revenue chart styling */\n.revenue-chart {\n    min-height: 300px;\n}\n\n/* Responsive table improvements */\n@media (max-width: 768px) {\n    .table-responsive {\n        font-size: 0.875rem;\n    }\n    \n    .btn-group-sm .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n    }\n}\n\n/* Custom progress bars */\n.progress {\n    height: 8px;\n    border-radius: 4px;\n}\n\n.progress-bar {\n    border-radius: 4px;\n}\n\n/* Modal improvements */\n.modal-content {\n    border-radius: 0.5rem;\n    border: none;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n}\n\n.modal-header {\n    border-bottom: 1px solid var(--bs-border-color);\n    padding: 1.5rem;\n}\n\n.modal-body {\n    padding: 1.5rem;\n}\n\n.modal-footer {\n    border-top: 1px solid var(--bs-border-color);\n    padding: 1.5rem;\n}\n\n/* Form improvements */\n.form-control:focus,\n.form-select:focus {\n    border-color: var(--bs-primary);\n    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n}\n\n/* Alert styling */\n.alert {\n    border-radius: 0.5rem;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Gaming theme colors */\n:root {\n    --gaming-primary: #00d4ff;\n    --gaming-secondary: #ff6b35;\n    --gaming-success: #28a745;\n    --gaming-warning: #ffc107;\n    --gaming-danger: #dc3545;\n}\n\n/* Custom badges */\n.badge {\n    font-size: 0.75rem;\n    padding: 0.375rem 0.75rem;\n    border-radius: 0.375rem;\n}\n\n/* Loading spinner */\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Modern Body and Base Styling */\n.gaming-body {\n    background: linear-gradient(135deg, var(--gaming-dark) 0%, #0f0f0f 50%, var(--gaming-dark) 100%);\n    font-family: 'Rajdhani', sans-serif;\n    min-height: 100vh;\n    color: var(--gaming-text);\n}\n\n/* Compact navbar styling complete above */\n\n/* Modern Tables */\n.table {\n    background: var(--gaming-surface);\n    border-radius: 1rem;\n    overflow: hidden;\n    border: 1px solid var(--gaming-border);\n}\n\n.table th {\n    background: var(--gaming-surface-light);\n    border-color: var(--gaming-border);\n    color: var(--gaming-primary);\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    padding: 1rem;\n}\n\n.table td {\n    border-color: var(--gaming-border);\n    padding: 1rem;\n    vertical-align: middle;\n}\n\n.table-striped > tbody > tr:nth-of-type(odd) > td {\n    background: rgba(0, 255, 136, 0.02);\n}\n\n/* Modern Badges */\n.badge {\n    font-size: 0.8rem;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.badge.bg-secondary {\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light)) !important;\n    border: 1px solid var(--gaming-border);\n}\n\n.badge.bg-warning {\n    background: linear-gradient(135deg, var(--gaming-secondary), #ff8c42) !important;\n}\n\n.badge.bg-info {\n    background: linear-gradient(135deg, var(--gaming-accent), #42a5f5) !important;\n}\n\n.badge.bg-success {\n    background: linear-gradient(135deg, var(--gaming-primary), #00e676) !important;\n    color: var(--gaming-dark);\n}\n\n.badge.bg-danger {\n    background: linear-gradient(135deg, #ff4757, #ff3742) !important;\n}\n\n/* Card Pulse Animation */\n.card-pulse {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: inherit;\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    opacity: 0;\n    animation: card-pulse-effect 4s ease-in-out infinite;\n    pointer-events: none;\n}\n\n@keyframes card-pulse-effect {\n    0%, 100% { opacity: 0; transform: scale(1); }\n    50% { opacity: 0.05; transform: scale(1.02); }\n}\n\n/* Modern Login Page Styling */\n.login-card {\n    border: none;\n    border-radius: 2rem;\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light));\n    box-shadow: 0 20px 40px var(--gaming-shadow), 0 0 30px var(--gaming-glow);\n    overflow: hidden;\n    position: relative;\n}\n\n.login-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, var(--gaming-primary), var(--gaming-accent));\n}\n\n.login-header {\n    background: transparent;\n    border: none;\n    padding: 3rem 2rem 2rem;\n}\n\n.login-logo {\n    font-size: 4rem;\n    color: var(--gaming-primary);\n    text-shadow: 0 0 30px var(--gaming-glow);\n    margin-bottom: 1rem;\n    animation: logo-pulse 3s ease-in-out infinite;\n}\n\n.login-title {\n    font-family: 'Orbitron', monospace;\n    font-weight: 900;\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    margin-bottom: 0.5rem;\n}\n\n/* Enhanced Form Controls */\n.form-control,\n.form-select {\n    background: var(--gaming-surface-light);\n    border: 2px solid var(--gaming-border);\n    border-radius: 0.75rem;\n    color: var(--gaming-text);\n    padding: 0.875rem 1.25rem;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus,\n.form-select:focus {\n    background: var(--gaming-surface);\n    border-color: var(--gaming-primary);\n    box-shadow: 0 0 20px var(--gaming-glow);\n    color: var(--gaming-text);\n}\n\n.form-label {\n    color: var(--gaming-text);\n    font-weight: 600;\n    font-size: 1.1rem;\n    margin-bottom: 0.75rem;\n}\n\n/* Modern Modal Styling */\n.modal-content {\n    background: var(--gaming-surface);\n    border: 1px solid var(--gaming-border);\n    border-radius: 1.5rem;\n    box-shadow: 0 25px 50px var(--gaming-shadow);\n}\n\n.modal-header {\n    background: linear-gradient(135deg, var(--gaming-surface), var(--gaming-surface-light));\n    border-bottom: 2px solid var(--gaming-border);\n    border-radius: 1.5rem 1.5rem 0 0;\n}\n\n.modal-title {\n    color: var(--gaming-primary);\n    font-weight: 700;\n}\n\n/* Enhanced Alerts */\n.alert {\n    border: none;\n    border-radius: 1rem;\n    padding: 1rem 1.5rem;\n    font-weight: 500;\n    border-left: 4px solid;\n}\n\n.alert-success {\n    background: linear-gradient(135deg, rgba(0, 255, 136, 0.1), rgba(0, 255, 136, 0.05));\n    border-left-color: var(--gaming-primary);\n    color: var(--gaming-primary);\n}\n\n.alert-danger {\n    background: linear-gradient(135deg, rgba(255, 71, 87, 0.1), rgba(255, 71, 87, 0.05));\n    border-left-color: #ff4757;\n    color: #ff6b7a;\n}\n\n.alert-warning {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(255, 107, 53, 0.05));\n    border-left-color: var(--gaming-secondary);\n    color: var(--gaming-secondary);\n}\n\n.alert-info {\n    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(0, 212, 255, 0.05));\n    border-left-color: var(--gaming-accent);\n    color: var(--gaming-accent);\n}\n\n/* Page Headers */\nh1, h2, h3, h4, h5, h6 {\n    color: var(--gaming-text);\n    font-weight: 700;\n}\n\nh1 {\n    font-family: 'Orbitron', monospace;\n    font-size: 2.5rem;\n    background: linear-gradient(135deg, var(--gaming-primary), var(--gaming-accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n/* Container Improvements */\n.container-fluid {\n    padding: 2rem;\n}\n\n/* Responsive Design Enhancements */\n@media (max-width: 768px) {\n    .dashboard-card {\n        padding: 1.5rem;\n    }\n    \n    .dashboard-card h3 {\n        font-size: 2rem;\n    }\n    \n    .gaming-brand {\n        font-size: 1.25rem;\n    }\n    \n    .login-card {\n        margin: 1rem;\n        border-radius: 1.5rem;\n    }\n    \n    .login-header {\n        padding: 2rem 1rem 1.5rem;\n    }\n    \n    .login-logo {\n        font-size: 3rem;\n    }\n}\n","size_bytes":15819},"static/css/enhanced.css":{"content":"/* Enhanced Gaming Center Styles */\n\n/* Page Headers */\n.page-header {\n    padding: 2rem 0;\n    margin-bottom: 2rem;\n}\n\n.page-header i {\n    animation: bounce 2s infinite;\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-10px);\n    }\n    60% {\n        transform: translateY(-5px);\n    }\n}\n\n/* Enhanced Cards */\n.card {\n    border-radius: 15px;\n    box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n    transition: all 0.3s ease;\n    border: none;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.2);\n}\n\n.card-header {\n    background: linear-gradient(135deg, var(--gaming-surface) 0%, var(--gaming-surface-light) 100%);\n    border-bottom: 2px solid var(--gaming-border);\n    font-weight: 600;\n    border-radius: 15px 15px 0 0 !important;\n    color: var(--gaming-text);\n}\n\n/* Enhanced Buttons */\n.btn {\n    border-radius: 10px;\n    font-weight: 500;\n    transition: all 0.3s ease;\n    border: none;\n    padding: 0.6rem 1.5rem;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.btn-lg {\n    padding: 0.8rem 2rem;\n    font-size: 1.1rem;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);\n}\n\n.btn-success {\n    background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);\n}\n\n.btn-info {\n    background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);\n}\n\n.btn-warning {\n    background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);\n}\n\n/* Enhanced Form Controls */\n.form-control, .form-select {\n    border-radius: 10px;\n    border: 2px solid #e9ecef;\n    transition: all 0.3s ease;\n    padding: 0.75rem 1rem;\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.3rem rgba(0, 123, 255, 0.15);\n    transform: translateY(-1px);\n}\n\n.input-group-text {\n    border-radius: 10px 0 0 10px;\n    border: 2px solid var(--gaming-border);\n    background: linear-gradient(135deg, var(--gaming-surface) 0%, var(--gaming-surface-light) 100%);\n    font-weight: 500;\n    color: var(--gaming-text);\n}\n\n/* Search and Filter Bar */\n.search-filter-bar {\n    background: linear-gradient(135deg, var(--gaming-surface) 0%, var(--gaming-surface-light) 100%);\n    padding: 1.5rem;\n    border-radius: 15px;\n    box-shadow: 0 2px 10px var(--gaming-shadow);\n    margin-bottom: 2rem;\n    border: 1px solid var(--gaming-border);\n}\n\n/* Enhanced Tables */\n.table {\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n}\n\n.table th {\n    background: linear-gradient(135deg, var(--gaming-surface) 0%, var(--gaming-surface-light) 100%);\n    border-bottom: 2px solid var(--gaming-border);\n    font-weight: 600;\n    text-transform: uppercase;\n    font-size: 0.85rem;\n    letter-spacing: 0.5px;\n    padding: 1rem;\n    color: var(--gaming-text);\n}\n\n.table td {\n    padding: 1rem;\n    vertical-align: middle;\n}\n\n/* Enhanced Modals */\n.modal-content {\n    border-radius: 20px;\n    border: none;\n    box-shadow: 0 15px 50px rgba(0,0,0,0.3);\n}\n\n.modal-header {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n    border-bottom: 2px solid #dee2e6;\n    border-radius: 20px 20px 0 0;\n    padding: 1.5rem;\n}\n\n.modal-title {\n    font-weight: 600;\n    font-size: 1.2rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .page-header {\n        padding: 1rem 0;\n    }\n    \n    .page-header h1 {\n        font-size: 2rem;\n    }\n    \n    .btn-lg {\n        padding: 0.6rem 1.2rem;\n        font-size: 1rem;\n    }\n}","size_bytes":3567},"static/js/dashboard.js":{"content":"// Dashboard specific JavaScript functionality\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Auto-refresh dashboard every 30 seconds\n    if (window.location.pathname === '/dashboard') {\n        setInterval(function() {\n            // Only refresh if no modals are open\n            if (!document.querySelector('.modal.show')) {\n                window.location.reload();\n            }\n        }, 30000); // 30 seconds\n    }\n\n    // Format numbers with thousand separators\n    function formatNumber(num) {\n        return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    // Add confirmation dialogs for dangerous actions\n    document.querySelectorAll('[data-confirm]').forEach(function(element) {\n        element.addEventListener('click', function(e) {\n            const message = this.getAttribute('data-confirm');\n            if (!confirm(message)) {\n                e.preventDefault();\n            }\n        });\n    });\n\n    // Auto-hide alerts after 5 seconds\n    setTimeout(function() {\n        document.querySelectorAll('.alert').forEach(function(alert) {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        });\n    }, 5000);\n\n    // Update session totals dynamically (for session detail page)\n    if (window.location.pathname.includes('/sessions/')) {\n        updateSessionTotals();\n    }\n});\n\nfunction updateSessionTotals() {\n    // This function can be called after adding/removing products\n    // to update the session totals without full page refresh\n    const sessionPriceElements = document.querySelectorAll('[data-session-price]');\n    const productsTotalElements = document.querySelectorAll('[data-products-total]');\n    const totalPriceElements = document.querySelectorAll('[data-total-price]');\n\n    // Implementation would depend on having API endpoints to fetch updated totals\n    // For now, we'll just refresh the page\n    if (sessionPriceElements.length > 0) {\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n    }\n}\n\n// Function to show loading state on buttons\nfunction showLoading(button) {\n    const originalText = button.innerHTML;\n    button.innerHTML = '<i class=\"spinner-border spinner-border-sm\"></i> Loading...';\n    button.disabled = true;\n    \n    return function() {\n        button.innerHTML = originalText;\n        button.disabled = false;\n    };\n}\n\n// Add loading states to form submissions\ndocument.querySelectorAll('form').forEach(function(form) {\n    form.addEventListener('submit', function(e) {\n        const submitButton = form.querySelector('button[type=\"submit\"]');\n        if (submitButton) {\n            showLoading(submitButton);\n        }\n    });\n});\n","size_bytes":2709},"static/js/filters.js":{"content":"// Search and Filter Functionality\n\n// Category Search\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Category search functionality\n    const categorySearch = document.getElementById('categorySearch');\n    if (categorySearch) {\n        categorySearch.addEventListener('input', function() {\n            const searchTerm = this.value.toLowerCase();\n            const rows = document.querySelectorAll('tbody tr');\n            \n            rows.forEach(row => {\n                const categoryName = row.cells[0].textContent.toLowerCase();\n                const categoryDesc = row.cells[1].textContent.toLowerCase();\n                \n                if (categoryName.includes(searchTerm) || categoryDesc.includes(searchTerm)) {\n                    row.style.display = '';\n                } else {\n                    row.style.display = 'none';\n                }\n            });\n        });\n    }\n\n    // Room search and filter functionality\n    const roomSearch = document.getElementById('roomSearch');\n    const categoryFilter = document.getElementById('categoryFilter');\n    \n    if (roomSearch || categoryFilter) {\n        function filterRooms() {\n            const searchTerm = roomSearch ? roomSearch.value.toLowerCase() : '';\n            const selectedCategory = categoryFilter ? categoryFilter.value : '';\n            const roomCards = document.querySelectorAll('.col-md-6.col-lg-4');\n            \n            roomCards.forEach(card => {\n                const roomName = card.querySelector('.card-title').textContent.toLowerCase();\n                const roomCategory = card.querySelector('.badge').textContent;\n                const roomDesc = card.querySelector('.card-text') ? \n                    card.querySelector('.card-text').textContent.toLowerCase() : '';\n                \n                const matchesSearch = roomName.includes(searchTerm) || roomDesc.includes(searchTerm);\n                const matchesCategory = !selectedCategory || roomCategory === selectedCategory;\n                \n                if (matchesSearch && matchesCategory) {\n                    card.style.display = '';\n                } else {\n                    card.style.display = 'none';\n                }\n            });\n        }\n        \n        if (roomSearch) {\n            roomSearch.addEventListener('input', filterRooms);\n        }\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', filterRooms);\n        }\n    }\n\n    // Product search and filter functionality\n    const productSearch = document.getElementById('productSearch');\n    const productCategoryFilter = document.getElementById('productCategoryFilter');\n    \n    if (productSearch || productCategoryFilter) {\n        function filterProducts() {\n            const searchTerm = productSearch ? productSearch.value.toLowerCase() : '';\n            const selectedCategory = productCategoryFilter ? productCategoryFilter.value.toLowerCase() : '';\n            const rows = document.querySelectorAll('tbody tr');\n            \n            rows.forEach(row => {\n                if (row.cells && row.cells.length >= 2) {\n                    const productName = row.cells[0].textContent.toLowerCase();\n                    const productCategoryElement = row.cells[1].querySelector('.badge');\n                    const productCategory = productCategoryElement ? productCategoryElement.textContent.toLowerCase() : '';\n                    \n                    const matchesSearch = productName.includes(searchTerm);\n                    \n                    // Category mapping for better matching\n                    let matchesCategory = true;\n                    if (selectedCategory) {\n                        const categoryMap = {\n                            'ichimliklar': ['drinks', 'ichimliklar'],\n                            'gazaklar': ['snacks', 'gazaklar'],\n                            'ovqatlar': ['food', 'ovqatlar'],\n                            'shirinliklar': ['desserts', 'shirinliklar'],\n                            'boshqa': ['other', 'boshqa']\n                        };\n                        \n                        const validCategories = categoryMap[selectedCategory] || [selectedCategory];\n                        matchesCategory = validCategories.some(cat => productCategory.includes(cat));\n                    }\n                    \n                    if (matchesSearch && matchesCategory) {\n                        row.style.display = '';\n                    } else {\n                        row.style.display = 'none';\n                    }\n                }\n            });\n        }\n        \n        if (productSearch) {\n            productSearch.addEventListener('input', filterProducts);\n        }\n        if (productCategoryFilter) {\n            productCategoryFilter.addEventListener('change', filterProducts);\n        }\n    }\n});\n\n// Analytics date selection functionality\nfunction toggleDateInputs() {\n    const reportType = document.getElementById('reportType').value;\n    const dailySection = document.getElementById('dailyDateSection');\n    const monthlySection = document.getElementById('monthlyDateSection');\n    \n    if (reportType === 'daily') {\n        dailySection.style.display = 'block';\n        monthlySection.style.display = 'none';\n    } else {\n        dailySection.style.display = 'none';\n        monthlySection.style.display = 'block';\n    }\n}\n\nfunction loadReport() {\n    const reportType = document.getElementById('reportType').value;\n    let dateParam = '';\n    \n    if (reportType === 'daily') {\n        const selectedDate = document.getElementById('selectedDate').value;\n        dateParam = `?type=daily&date=${selectedDate}`;\n    } else {\n        const selectedMonth = document.getElementById('selectedMonth').value;\n        dateParam = `?type=monthly&month=${selectedMonth}`;\n    }\n    \n    // Show loading state\n    const button = event.target;\n    const originalText = button.innerHTML;\n    button.innerHTML = '<i class=\"bi bi-arrow-clockwise\"></i> Yuklanmoqda...';\n    button.disabled = true;\n    \n    // Reload page with new parameters\n    window.location.href = '/analytics' + dateParam;\n}\n\n// Initialize date inputs with current values\ndocument.addEventListener('DOMContentLoaded', function() {\n    const today = new Date();\n    const currentDate = today.toISOString().split('T')[0];\n    const currentMonth = today.toISOString().slice(0, 7);\n    \n    const selectedDateInput = document.getElementById('selectedDate');\n    const selectedMonthInput = document.getElementById('selectedMonth');\n    \n    if (selectedDateInput && !selectedDateInput.value) {\n        selectedDateInput.value = currentDate;\n    }\n    if (selectedMonthInput && !selectedMonthInput.value) {\n        selectedMonthInput.value = currentMonth;\n    }\n});","size_bytes":6781},"static/js/timer.js":{"content":"class SessionTimer {\n    constructor() {\n        this.timers = new Map();\n        this.intervals = new Map();\n        this.init();\n    }\n\n    init() {\n        // Find all timer elements on the page\n        document.querySelectorAll('.timer').forEach(timerEl => {\n            const sessionId = timerEl.dataset.sessionId;\n            const sessionType = timerEl.dataset.sessionType;\n            const duration = timerEl.dataset.duration;\n            \n            this.timers.set(sessionId, {\n                element: timerEl,\n                sessionType: sessionType,\n                duration: duration ? parseInt(duration) : null\n            });\n            \n            this.startTimer(sessionId);\n        });\n    }\n\n    startTimer(sessionId) {\n        const timer = this.timers.get(sessionId);\n        if (!timer) return;\n\n        // Clear any existing interval\n        if (this.intervals.has(sessionId)) {\n            clearInterval(this.intervals.get(sessionId));\n        }\n\n        // Update timer immediately\n        this.updateTimer(sessionId);\n\n        // Set up interval to update every second\n        const intervalId = setInterval(() => {\n            this.updateTimer(sessionId);\n        }, 1000);\n\n        this.intervals.set(sessionId, intervalId);\n    }\n\n    async updateTimer(sessionId) {\n        const timer = this.timers.get(sessionId);\n        if (!timer) return;\n\n        try {\n            const response = await fetch(`/api/session_time/${sessionId}`);\n            const data = await response.json();\n            \n            const timeDisplay = timer.element.querySelector('.time-display');\n            \n            if (data.expired) {\n                timeDisplay.innerHTML = '<span class=\"text-danger\">VAQT TUGADI</span>';\n                timeDisplay.parentElement.classList.add('text-danger');\n                this.stopTimer(sessionId);\n                \n                // Auto-refresh the page after a few seconds\n                setTimeout(() => {\n                    window.location.reload();\n                }, 3000);\n                \n                return;\n            }\n\n            if (timer.sessionType === 'fixed') {\n                // Show only remaining time for fixed sessions\n                const remainingTime = this.formatTime(data.remaining_seconds);\n                timeDisplay.innerHTML = `<span class=\"text-warning\">${remainingTime} qoldi</span>`;\n                \n                // Update the session price display in real-time for fixed sessions\n                const sessionPriceEl = document.getElementById(`session-price-${sessionId}`);\n                const totalPriceEl = document.getElementById(`total-price-${sessionId}`);\n                if (sessionPriceEl && data.current_cost) {\n                    sessionPriceEl.textContent = `${Math.round(data.current_cost).toLocaleString()} som`;\n                }\n                if (totalPriceEl && data.current_cost) {\n                    totalPriceEl.textContent = `${Math.round(data.current_cost).toLocaleString()} som`;\n                }\n                \n                // Add warning classes when time is running low\n                if (data.remaining_seconds <= 300) { // 5 minutes\n                    timeDisplay.innerHTML = `<span class=\"text-danger\">${remainingTime} qoldi</span>`;\n                    timeDisplay.parentElement.classList.add('text-danger');\n                } else if (data.remaining_seconds <= 600) { // 10 minutes\n                    timeDisplay.parentElement.classList.add('text-warning');\n                }\n            } else {\n                // Show only elapsed time for VIP sessions\n                const elapsedTime = this.formatTime(data.elapsed_seconds);\n                timeDisplay.innerHTML = `<span class=\"text-info\">${elapsedTime} o'tdi</span>`;\n                \n                // Update the session price display in real-time for VIP sessions\n                const sessionPriceEl = document.getElementById(`session-price-${sessionId}`);\n                const totalPriceEl = document.getElementById(`total-price-${sessionId}`);\n                if (sessionPriceEl && data.current_cost) {\n                    sessionPriceEl.textContent = `${Math.round(data.current_cost).toLocaleString()} som`;\n                }\n                if (totalPriceEl && data.current_cost) {\n                    totalPriceEl.textContent = `${Math.round(data.current_cost).toLocaleString()} som`;\n                }\n            }\n            \n        } catch (error) {\n            console.error('Error updating timer:', error);\n            const timeDisplay = timer.element.querySelector('.time-display');\n            timeDisplay.innerHTML = '<span class=\"text-muted\">Error</span>';\n        }\n    }\n\n    formatTime(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        } else {\n            return `${minutes}:${secs.toString().padStart(2, '0')}`;\n        }\n    }\n\n    stopTimer(sessionId) {\n        if (this.intervals.has(sessionId)) {\n            clearInterval(this.intervals.get(sessionId));\n            this.intervals.delete(sessionId);\n        }\n    }\n\n    stopAllTimers() {\n        this.intervals.forEach((intervalId) => {\n            clearInterval(intervalId);\n        });\n        this.intervals.clear();\n    }\n}\n\n// Initialize timers when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.sessionTimer = new SessionTimer();\n});\n\n// Clean up timers when page is unloaded\nwindow.addEventListener('beforeunload', function() {\n    if (window.sessionTimer) {\n        window.sessionTimer.stopAllTimers();\n    }\n});\n","size_bytes":5801}}}